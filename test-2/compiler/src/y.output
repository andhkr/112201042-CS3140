State 110 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce


Grammar

    0 $accept: Prog $end

    1 Prog: Gdecl_sec MainBlock

    2 Gdecl_sec: DECL Gdecl_list ENDDECL

    3 Gdecl_list: ε
    4           | Gdecl Gdecl_list

    5 Gdecl: ret_type Glist ';'

    6 ret_type: T_INT
    7         | T_BOOL
    8         | rt_FLOAT

    9 Glist: Gid
   10      | Gid ',' Glist
   11      | func ',' Glist

   12 Gid: VAR
   13    | Gid '[' NUM ']'
   14    | Gid '[' NUM ']' '[' NUM ']'

   15 func: VAR '(' arg_list ')'

   16 arg_list: ε
   17         | arg_list1

   18 arg_list1: arg_list1 ';' arg
   19          | arg

   20 arg: arg_type var_list

   21 arg_type: T_INT

   22 var_list: VAR
   23         | VAR ',' var_list

   24 MainBlock: stmt_list
   25          | BEG stmt_list END

   26 stmt_list: ε
   27          | statement stmt_list
   28          | error ';'

   29 statement: assign_stmt ';'
   30          | write_stmt ';'
   31          | cond_stmt
   32          | control_stmt ';'

   33 write_stmt: WRITE '(' expr ')'
   34           | WRITE '(' '"' str_expr '"' ')'

   35 assign_stmt: ε
   36            | var_expr '=' expr

   37 cond_stmt: IF expr THEN stmt_list ENDIF
   38          | IF expr THEN stmt_list ELSE stmt_list ENDIF
   39          | FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'
   40          | DO '{' stmt_list '}' WHILE '(' expr ')' ';'

   41 control_stmt: BREAK_Y

   42 expr: NUM
   43     | T_FLOAT
   44     | T
   45     | F
   46     | '-' expr
   47     | var_expr
   48     | '(' expr ')'
   49     | expr '+' expr
   50     | expr '-' expr
   51     | expr '*' expr
   52     | expr '/' expr
   53     | expr '%' expr
   54     | expr '<' expr
   55     | expr '>' expr
   56     | expr GREATERTHANOREQUAL expr
   57     | expr LESSTHANOREQUAL expr
   58     | expr NOTEQUAL expr
   59     | expr EQUALEQUAL expr
   60     | LOGICAL_NOT expr
   61     | expr LOGICAL_AND expr
   62     | expr LOGICAL_OR expr

   63 str_expr: VAR
   64         | str_expr VAR

   65 var_expr: VAR
   66         | var_expr '[' expr ']'
   67         | var_expr '[' expr ']' '[' expr ']'


Terminals, with rules where they appear

    $end (0) 0
    '"' (34) 34
    '%' (37) 53
    '(' (40) 15 33 34 39 40 48
    ')' (41) 15 33 34 39 40 48
    '*' (42) 51
    '+' (43) 49
    ',' (44) 10 11 23
    '-' (45) 46 50
    '/' (47) 52
    ';' (59) 5 18 28 29 30 32 39 40
    '<' (60) 54
    '=' (61) 36
    '>' (62) 55
    '[' (91) 13 14 66 67
    ']' (93) 13 14 66 67
    '{' (123) 39 40
    '}' (125) 39 40
    error (256) 28
    WRITE <treeNode> (258) 33 34
    DECL <treeNode> (259) 2
    ENDDECL <treeNode> (260) 2
    T_INT <treeNode> (261) 6 21
    T_BOOL <treeNode> (262) 7
    rt_FLOAT <treeNode> (263) 8
    IF <treeNode> (264) 37 38
    ELSE <treeNode> (265) 38
    LOGICAL_AND <treeNode> (266) 61
    LOGICAL_NOT <treeNode> (267) 60
    LOGICAL_OR <treeNode> (268) 62
    EQUALEQUAL <treeNode> (269) 59
    LESSTHANOREQUAL <treeNode> (270) 57
    GREATERTHANOREQUAL <treeNode> (271) 56
    NOTEQUAL <treeNode> (272) 58
    FOR <treeNode> (273) 39
    BREAK_Y <treeNode> (274) 41
    DO <treeNode> (275) 40
    WHILE <treeNode> (276) 40
    VAR <entry> (277) 12 15 22 23 63 64 65
    NUM <i_var> (278) 13 14 42
    T_FLOAT <f_var> (279) 43
    T <b_var> (280) 44
    F <b_var> (281) 45
    THEN <var> (282) 37 38
    ENDIF <var> (283) 37 38
    BEG (284) 25
    END (285) 25


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    Prog (49)
        on left: 1
        on right: 0
    Gdecl_sec (50)
        on left: 2
        on right: 1
    Gdecl_list <treeNode> (51)
        on left: 3 4
        on right: 2 4
    Gdecl <treeNode> (52)
        on left: 5
        on right: 4
    ret_type <treeNode> (53)
        on left: 6 7 8
        on right: 5
    Glist <treeNode> (54)
        on left: 9 10 11
        on right: 5 10 11
    Gid <treeNode> (55)
        on left: 12 13 14
        on right: 9 10 13 14
    func (56)
        on left: 15
        on right: 11
    arg_list (57)
        on left: 16 17
        on right: 15
    arg_list1 (58)
        on left: 18 19
        on right: 17 18
    arg (59)
        on left: 20
        on right: 18 19
    arg_type (60)
        on left: 21
        on right: 20
    var_list (61)
        on left: 22 23
        on right: 20 23
    MainBlock (62)
        on left: 24 25
        on right: 1
    stmt_list <treeNode> (63)
        on left: 26 27 28
        on right: 24 25 27 37 38 39 40
    statement <treeNode> (64)
        on left: 29 30 31 32
        on right: 27
    write_stmt <treeNode> (65)
        on left: 33 34
        on right: 30
    assign_stmt <treeNode> (66)
        on left: 35 36
        on right: 29 39
    cond_stmt <treeNode> (67)
        on left: 37 38 39 40
        on right: 31
    control_stmt <treeNode> (68)
        on left: 41
        on right: 32
    expr <treeNode> (69)
        on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
        on right: 33 36 37 38 39 40 46 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 66 67
    str_expr <treeNode> (70)
        on left: 63 64
        on right: 34 64
    var_expr <treeNode> (71)
        on left: 65 66 67
        on right: 36 47 66 67


State 0

    0 $accept: • Prog $end

    DECL  shift, and go to state 1

    Prog       go to state 2
    Gdecl_sec  go to state 3


State 1

    2 Gdecl_sec: DECL • Gdecl_list ENDDECL

    T_INT     shift, and go to state 4
    T_BOOL    shift, and go to state 5
    rt_FLOAT  shift, and go to state 6

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 7
    Gdecl       go to state 8
    ret_type    go to state 9


State 2

    0 $accept: Prog • $end

    $end  shift, and go to state 10


State 3

    1 Prog: Gdecl_sec • MainBlock

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17
    BEG      shift, and go to state 18

    $end  reduce using rule 26 (stmt_list)
    ';'   reduce using rule 35 (assign_stmt)

    MainBlock     go to state 19
    stmt_list     go to state 20
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 4

    6 ret_type: T_INT •

    $default  reduce using rule 6 (ret_type)


State 5

    7 ret_type: T_BOOL •

    $default  reduce using rule 7 (ret_type)


State 6

    8 ret_type: rt_FLOAT •

    $default  reduce using rule 8 (ret_type)


State 7

    2 Gdecl_sec: DECL Gdecl_list • ENDDECL

    ENDDECL  shift, and go to state 27


State 8

    4 Gdecl_list: Gdecl • Gdecl_list

    T_INT     shift, and go to state 4
    T_BOOL    shift, and go to state 5
    rt_FLOAT  shift, and go to state 6

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 28
    Gdecl       go to state 8
    ret_type    go to state 9


State 9

    5 Gdecl: ret_type • Glist ';'

    VAR  shift, and go to state 29

    Glist  go to state 30
    Gid    go to state 31
    func   go to state 32


State 10

    0 $accept: Prog $end •

    $default  accept


State 11

   28 stmt_list: error • ';'

    ';'  shift, and go to state 33


State 12

   33 write_stmt: WRITE • '(' expr ')'
   34           | WRITE • '(' '"' str_expr '"' ')'

    '('  shift, and go to state 34


State 13

   37 cond_stmt: IF • expr THEN stmt_list ENDIF
   38          | IF • expr THEN stmt_list ELSE stmt_list ENDIF

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 42
    var_expr  go to state 43


State 14

   39 cond_stmt: FOR • '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    '('  shift, and go to state 44


State 15

   41 control_stmt: BREAK_Y •

    $default  reduce using rule 41 (control_stmt)


State 16

   40 cond_stmt: DO • '{' stmt_list '}' WHILE '(' expr ')' ';'

    '{'  shift, and go to state 45


State 17

   65 var_expr: VAR •

    $default  reduce using rule 65 (var_expr)


State 18

   25 MainBlock: BEG • stmt_list END

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17

    END  reduce using rule 26 (stmt_list)
    ';'  reduce using rule 35 (assign_stmt)

    stmt_list     go to state 46
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 19

    1 Prog: Gdecl_sec MainBlock •

    $default  reduce using rule 1 (Prog)


State 20

   24 MainBlock: stmt_list •

    $default  reduce using rule 24 (MainBlock)


State 21

   27 stmt_list: statement • stmt_list

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17

    $end   reduce using rule 26 (stmt_list)
    ELSE   reduce using rule 26 (stmt_list)
    ENDIF  reduce using rule 26 (stmt_list)
    END    reduce using rule 26 (stmt_list)
    ';'    reduce using rule 35 (assign_stmt)
    '}'    reduce using rule 26 (stmt_list)

    stmt_list     go to state 47
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 22

   30 statement: write_stmt • ';'

    ';'  shift, and go to state 48


State 23

   29 statement: assign_stmt • ';'

    ';'  shift, and go to state 49


State 24

   31 statement: cond_stmt •

    $default  reduce using rule 31 (statement)


State 25

   32 statement: control_stmt • ';'

    ';'  shift, and go to state 50


State 26

   36 assign_stmt: var_expr • '=' expr
   66 var_expr: var_expr • '[' expr ']'
   67         | var_expr • '[' expr ']' '[' expr ']'

    '='  shift, and go to state 51
    '['  shift, and go to state 52


State 27

    2 Gdecl_sec: DECL Gdecl_list ENDDECL •

    $default  reduce using rule 2 (Gdecl_sec)


State 28

    4 Gdecl_list: Gdecl Gdecl_list •

    $default  reduce using rule 4 (Gdecl_list)


State 29

   12 Gid: VAR •
   15 func: VAR • '(' arg_list ')'

    '('  shift, and go to state 53

    $default  reduce using rule 12 (Gid)


State 30

    5 Gdecl: ret_type Glist • ';'

    ';'  shift, and go to state 54


State 31

    9 Glist: Gid •
   10      | Gid • ',' Glist
   13 Gid: Gid • '[' NUM ']'
   14    | Gid • '[' NUM ']' '[' NUM ']'

    ','  shift, and go to state 55
    '['  shift, and go to state 56

    $default  reduce using rule 9 (Glist)


State 32

   11 Glist: func • ',' Glist

    ','  shift, and go to state 57


State 33

   28 stmt_list: error ';' •

    $default  reduce using rule 28 (stmt_list)


State 34

   33 write_stmt: WRITE '(' • expr ')'
   34           | WRITE '(' • '"' str_expr '"' ')'

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41
    '"'          shift, and go to state 58

    expr      go to state 59
    var_expr  go to state 43


State 35

   60 expr: LOGICAL_NOT • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 60
    var_expr  go to state 43


State 36

   42 expr: NUM •

    $default  reduce using rule 42 (expr)


State 37

   43 expr: T_FLOAT •

    $default  reduce using rule 43 (expr)


State 38

   44 expr: T •

    $default  reduce using rule 44 (expr)


State 39

   45 expr: F •

    $default  reduce using rule 45 (expr)


State 40

   46 expr: '-' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 61
    var_expr  go to state 43


State 41

   48 expr: '(' • expr ')'

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 62
    var_expr  go to state 43


State 42

   37 cond_stmt: IF expr • THEN stmt_list ENDIF
   38          | IF expr • THEN stmt_list ELSE stmt_list ENDIF
   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    THEN                shift, and go to state 69
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76


State 43

   47 expr: var_expr •
   66 var_expr: var_expr • '[' expr ']'
   67         | var_expr • '[' expr ']' '[' expr ']'

    '['  shift, and go to state 52

    $default  reduce using rule 47 (expr)


State 44

   39 cond_stmt: FOR '(' • assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 17

    $default  reduce using rule 35 (assign_stmt)

    assign_stmt  go to state 77
    var_expr     go to state 26


State 45

   40 cond_stmt: DO '{' • stmt_list '}' WHILE '(' expr ')' ';'

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17

    ';'  reduce using rule 35 (assign_stmt)
    '}'  reduce using rule 26 (stmt_list)

    stmt_list     go to state 78
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 46

   25 MainBlock: BEG stmt_list • END

    END  shift, and go to state 79


State 47

   27 stmt_list: statement stmt_list •

    $default  reduce using rule 27 (stmt_list)


State 48

   30 statement: write_stmt ';' •

    $default  reduce using rule 30 (statement)


State 49

   29 statement: assign_stmt ';' •

    $default  reduce using rule 29 (statement)


State 50

   32 statement: control_stmt ';' •

    $default  reduce using rule 32 (statement)


State 51

   36 assign_stmt: var_expr '=' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 80
    var_expr  go to state 43


State 52

   66 var_expr: var_expr '[' • expr ']'
   67         | var_expr '[' • expr ']' '[' expr ']'

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 81
    var_expr  go to state 43


State 53

   15 func: VAR '(' • arg_list ')'

    T_INT  shift, and go to state 82

    $default  reduce using rule 16 (arg_list)

    arg_list   go to state 83
    arg_list1  go to state 84
    arg        go to state 85
    arg_type   go to state 86


State 54

    5 Gdecl: ret_type Glist ';' •

    $default  reduce using rule 5 (Gdecl)


State 55

   10 Glist: Gid ',' • Glist

    VAR  shift, and go to state 29

    Glist  go to state 87
    Gid    go to state 31
    func   go to state 32


State 56

   13 Gid: Gid '[' • NUM ']'
   14    | Gid '[' • NUM ']' '[' NUM ']'

    NUM  shift, and go to state 88


State 57

   11 Glist: func ',' • Glist

    VAR  shift, and go to state 29

    Glist  go to state 89
    Gid    go to state 31
    func   go to state 32


State 58

   34 write_stmt: WRITE '(' '"' • str_expr '"' ')'

    VAR  shift, and go to state 90

    str_expr  go to state 91


State 59

   33 write_stmt: WRITE '(' expr • ')'
   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76
    ')'                 shift, and go to state 92


State 60

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   60     | LOGICAL_NOT expr •
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    $default  reduce using rule 60 (expr)


State 61

   46 expr: '-' expr •
   49     | expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 46 (expr)


State 62

   48 expr: '(' expr • ')'
   49     | expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76
    ')'                 shift, and go to state 93


State 63

   61 expr: expr LOGICAL_AND • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 94
    var_expr  go to state 43


State 64

   62 expr: expr LOGICAL_OR • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 95
    var_expr  go to state 43


State 65

   59 expr: expr EQUALEQUAL • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 96
    var_expr  go to state 43


State 66

   57 expr: expr LESSTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 97
    var_expr  go to state 43


State 67

   56 expr: expr GREATERTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 98
    var_expr  go to state 43


State 68

   58 expr: expr NOTEQUAL • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 99
    var_expr  go to state 43


State 69

   37 cond_stmt: IF expr THEN • stmt_list ENDIF
   38          | IF expr THEN • stmt_list ELSE stmt_list ENDIF

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17

    ELSE   reduce using rule 26 (stmt_list)
    ENDIF  reduce using rule 26 (stmt_list)
    ';'    reduce using rule 35 (assign_stmt)

    stmt_list     go to state 100
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 70

   54 expr: expr '<' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 101
    var_expr  go to state 43


State 71

   55 expr: expr '>' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 102
    var_expr  go to state 43


State 72

   49 expr: expr '+' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 103
    var_expr  go to state 43


State 73

   50 expr: expr '-' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 104
    var_expr  go to state 43


State 74

   51 expr: expr '*' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 105
    var_expr  go to state 43


State 75

   52 expr: expr '/' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 106
    var_expr  go to state 43


State 76

   53 expr: expr '%' • expr

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 107
    var_expr  go to state 43


State 77

   39 cond_stmt: FOR '(' assign_stmt • ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    ';'  shift, and go to state 108


State 78

   40 cond_stmt: DO '{' stmt_list • '}' WHILE '(' expr ')' ';'

    '}'  shift, and go to state 109


State 79

   25 MainBlock: BEG stmt_list END •

    $default  reduce using rule 25 (MainBlock)


State 80

   36 assign_stmt: var_expr '=' expr •
   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76

    $default  reduce using rule 36 (assign_stmt)


State 81

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr
   66 var_expr: var_expr '[' expr • ']'
   67         | var_expr '[' expr • ']' '[' expr ']'

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76
    ']'                 shift, and go to state 110


State 82

   21 arg_type: T_INT •

    $default  reduce using rule 21 (arg_type)


State 83

   15 func: VAR '(' arg_list • ')'

    ')'  shift, and go to state 111


State 84

   17 arg_list: arg_list1 •
   18 arg_list1: arg_list1 • ';' arg

    ';'  shift, and go to state 112

    $default  reduce using rule 17 (arg_list)


State 85

   19 arg_list1: arg •

    $default  reduce using rule 19 (arg_list1)


State 86

   20 arg: arg_type • var_list

    VAR  shift, and go to state 113

    var_list  go to state 114


State 87

   10 Glist: Gid ',' Glist •

    $default  reduce using rule 10 (Glist)


State 88

   13 Gid: Gid '[' NUM • ']'
   14    | Gid '[' NUM • ']' '[' NUM ']'

    ']'  shift, and go to state 115


State 89

   11 Glist: func ',' Glist •

    $default  reduce using rule 11 (Glist)


State 90

   63 str_expr: VAR •

    $default  reduce using rule 63 (str_expr)


State 91

   34 write_stmt: WRITE '(' '"' str_expr • '"' ')'
   64 str_expr: str_expr • VAR

    VAR  shift, and go to state 116
    '"'  shift, and go to state 117


State 92

   33 write_stmt: WRITE '(' expr ')' •

    $default  reduce using rule 33 (write_stmt)


State 93

   48 expr: '(' expr ')' •

    $default  reduce using rule 48 (expr)


State 94

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   61     | expr LOGICAL_AND expr •
   62     | expr • LOGICAL_OR expr

    $default  reduce using rule 61 (expr)


State 95

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr
   62     | expr LOGICAL_OR expr •

    $default  reduce using rule 62 (expr)


State 96

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   59     | expr EQUALEQUAL expr •
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '+'          shift, and go to state 72
    '-'          shift, and go to state 73
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 59 (expr)


State 97

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   57     | expr LESSTHANOREQUAL expr •
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '+'          shift, and go to state 72
    '-'          shift, and go to state 73
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 57 (expr)


State 98

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   56     | expr GREATERTHANOREQUAL expr •
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '+'          shift, and go to state 72
    '-'          shift, and go to state 73
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 56 (expr)


State 99

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   58     | expr NOTEQUAL expr •
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '+'          shift, and go to state 72
    '-'          shift, and go to state 73
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 58 (expr)


State 100

   37 cond_stmt: IF expr THEN stmt_list • ENDIF
   38          | IF expr THEN stmt_list • ELSE stmt_list ENDIF

    ELSE   shift, and go to state 118
    ENDIF  shift, and go to state 119


State 101

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   54     | expr '<' expr •
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76

    $default  reduce using rule 54 (expr)


State 102

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   55     | expr '>' expr •
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76

    $default  reduce using rule 55 (expr)


State 103

   49 expr: expr • '+' expr
   49     | expr '+' expr •
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 49 (expr)


State 104

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   50     | expr '-' expr •
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '*'          shift, and go to state 74
    '/'          shift, and go to state 75
    '%'          shift, and go to state 76

    $default  reduce using rule 50 (expr)


State 105

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   51     | expr '*' expr •
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '%'          shift, and go to state 76

    $default  reduce using rule 51 (expr)


State 106

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   52     | expr '/' expr •
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64
    '%'          shift, and go to state 76

    $default  reduce using rule 52 (expr)


State 107

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   53     | expr '%' expr •
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 63
    LOGICAL_OR   shift, and go to state 64

    $default  reduce using rule 53 (expr)


State 108

   39 cond_stmt: FOR '(' assign_stmt ';' • expr ';' assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 120
    var_expr  go to state 43


State 109

   40 cond_stmt: DO '{' stmt_list '}' • WHILE '(' expr ')' ';'

    WHILE  shift, and go to state 121


State 110

   66 var_expr: var_expr '[' expr ']' •
   67         | var_expr '[' expr ']' • '[' expr ']'

    '['  shift, and go to state 122

    '['       [reduce using rule 66 (var_expr)]
    $default  reduce using rule 66 (var_expr)


State 111

   15 func: VAR '(' arg_list ')' •

    $default  reduce using rule 15 (func)


State 112

   18 arg_list1: arg_list1 ';' • arg

    T_INT  shift, and go to state 82

    arg       go to state 123
    arg_type  go to state 86


State 113

   22 var_list: VAR •
   23         | VAR • ',' var_list

    ','  shift, and go to state 124

    $default  reduce using rule 22 (var_list)


State 114

   20 arg: arg_type var_list •

    $default  reduce using rule 20 (arg)


State 115

   13 Gid: Gid '[' NUM ']' •
   14    | Gid '[' NUM ']' • '[' NUM ']'

    '['  shift, and go to state 125

    '['       [reduce using rule 13 (Gid)]
    $default  reduce using rule 13 (Gid)


State 116

   64 str_expr: str_expr VAR •

    $default  reduce using rule 64 (str_expr)


State 117

   34 write_stmt: WRITE '(' '"' str_expr '"' • ')'

    ')'  shift, and go to state 126


State 118

   38 cond_stmt: IF expr THEN stmt_list ELSE • stmt_list ENDIF

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17

    ENDIF  reduce using rule 26 (stmt_list)
    ';'    reduce using rule 35 (assign_stmt)

    stmt_list     go to state 127
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 119

   37 cond_stmt: IF expr THEN stmt_list ENDIF •

    $default  reduce using rule 37 (cond_stmt)


State 120

   39 cond_stmt: FOR '(' assign_stmt ';' expr • ';' assign_stmt ')' '{' stmt_list '}'
   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76
    ';'                 shift, and go to state 128


State 121

   40 cond_stmt: DO '{' stmt_list '}' WHILE • '(' expr ')' ';'

    '('  shift, and go to state 129


State 122

   67 var_expr: var_expr '[' expr ']' '[' • expr ']'

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 130
    var_expr  go to state 43


State 123

   18 arg_list1: arg_list1 ';' arg •

    $default  reduce using rule 18 (arg_list1)


State 124

   23 var_list: VAR ',' • var_list

    VAR  shift, and go to state 113

    var_list  go to state 131


State 125

   14 Gid: Gid '[' NUM ']' '[' • NUM ']'

    NUM  shift, and go to state 132


State 126

   34 write_stmt: WRITE '(' '"' str_expr '"' ')' •

    $default  reduce using rule 34 (write_stmt)


State 127

   38 cond_stmt: IF expr THEN stmt_list ELSE stmt_list • ENDIF

    ENDIF  shift, and go to state 133


State 128

   39 cond_stmt: FOR '(' assign_stmt ';' expr ';' • assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 17

    $default  reduce using rule 35 (assign_stmt)

    assign_stmt  go to state 134
    var_expr     go to state 26


State 129

   40 cond_stmt: DO '{' stmt_list '}' WHILE '(' • expr ')' ';'

    LOGICAL_NOT  shift, and go to state 35
    VAR          shift, and go to state 17
    NUM          shift, and go to state 36
    T_FLOAT      shift, and go to state 37
    T            shift, and go to state 38
    F            shift, and go to state 39
    '-'          shift, and go to state 40
    '('          shift, and go to state 41

    expr      go to state 135
    var_expr  go to state 43


State 130

   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr
   67 var_expr: var_expr '[' expr ']' '[' expr • ']'

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76
    ']'                 shift, and go to state 136


State 131

   23 var_list: VAR ',' var_list •

    $default  reduce using rule 23 (var_list)


State 132

   14 Gid: Gid '[' NUM ']' '[' NUM • ']'

    ']'  shift, and go to state 137


State 133

   38 cond_stmt: IF expr THEN stmt_list ELSE stmt_list ENDIF •

    $default  reduce using rule 38 (cond_stmt)


State 134

   39 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt • ')' '{' stmt_list '}'

    ')'  shift, and go to state 138


State 135

   40 cond_stmt: DO '{' stmt_list '}' WHILE '(' expr • ')' ';'
   49 expr: expr • '+' expr
   50     | expr • '-' expr
   51     | expr • '*' expr
   52     | expr • '/' expr
   53     | expr • '%' expr
   54     | expr • '<' expr
   55     | expr • '>' expr
   56     | expr • GREATERTHANOREQUAL expr
   57     | expr • LESSTHANOREQUAL expr
   58     | expr • NOTEQUAL expr
   59     | expr • EQUALEQUAL expr
   61     | expr • LOGICAL_AND expr
   62     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 63
    LOGICAL_OR          shift, and go to state 64
    EQUALEQUAL          shift, and go to state 65
    LESSTHANOREQUAL     shift, and go to state 66
    GREATERTHANOREQUAL  shift, and go to state 67
    NOTEQUAL            shift, and go to state 68
    '<'                 shift, and go to state 70
    '>'                 shift, and go to state 71
    '+'                 shift, and go to state 72
    '-'                 shift, and go to state 73
    '*'                 shift, and go to state 74
    '/'                 shift, and go to state 75
    '%'                 shift, and go to state 76
    ')'                 shift, and go to state 139


State 136

   67 var_expr: var_expr '[' expr ']' '[' expr ']' •

    $default  reduce using rule 67 (var_expr)


State 137

   14 Gid: Gid '[' NUM ']' '[' NUM ']' •

    $default  reduce using rule 14 (Gid)


State 138

   39 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' • '{' stmt_list '}'

    '{'  shift, and go to state 140


State 139

   40 cond_stmt: DO '{' stmt_list '}' WHILE '(' expr ')' • ';'

    ';'  shift, and go to state 141


State 140

   39 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' • stmt_list '}'

    error    shift, and go to state 11
    WRITE    shift, and go to state 12
    IF       shift, and go to state 13
    FOR      shift, and go to state 14
    BREAK_Y  shift, and go to state 15
    DO       shift, and go to state 16
    VAR      shift, and go to state 17

    ';'  reduce using rule 35 (assign_stmt)
    '}'  reduce using rule 26 (stmt_list)

    stmt_list     go to state 142
    statement     go to state 21
    write_stmt    go to state 22
    assign_stmt   go to state 23
    cond_stmt     go to state 24
    control_stmt  go to state 25
    var_expr      go to state 26


State 141

   40 cond_stmt: DO '{' stmt_list '}' WHILE '(' expr ')' ';' •

    $default  reduce using rule 40 (cond_stmt)


State 142

   39 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list • '}'

    '}'  shift, and go to state 143


State 143

   39 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}' •

    $default  reduce using rule 39 (cond_stmt)
