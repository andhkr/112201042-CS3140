Grammar

    0 $accept: Prog $end

    1 Prog: Gdecl_sec MainBlock

    2 Gdecl_sec: DECL Gdecl_list ENDDECL

    3 Gdecl_list: ε
    4           | Gdecl Gdecl_list

    5 Gdecl: ret_type Glist ';'

    6 ret_type: T_INT
    7         | T_BOOL

    8 Glist: Gid
    9      | Gid ',' Glist
   10      | func ',' Glist

   11 Gid: VAR
   12    | Gid '[' NUM ']'

   13 func: VAR '(' arg_list ')'

   14 arg_list: ε
   15         | arg_list1

   16 arg_list1: arg_list1 ';' arg
   17          | arg

   18 arg: arg_type var_list

   19 arg_type: T_INT

   20 var_list: VAR
   21         | VAR ',' var_list

   22 MainBlock: stmt_list
   23          | BEG stmt_list END

   24 stmt_list: ε
   25          | statement stmt_list
   26          | error ';'

   27 statement: assign_stmt ';'
   28          | write_stmt ';'
   29          | cond_stmt
   30          | control_stmt ';'

   31 write_stmt: WRITE '(' expr ')'
   32           | WRITE '(' '"' str_expr '"' ')'

   33 assign_stmt: ε
   34            | var_expr '=' expr

   35 cond_stmt: IF expr THEN stmt_list ENDIF
   36          | IF expr THEN stmt_list ELSE stmt_list ENDIF
   37          | FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

   38 control_stmt: BREAK_Y
   39             | CONTINUE

   40 expr: NUM
   41     | T
   42     | F
   43     | '-' expr
   44     | var_expr
   45     | '(' expr ')'
   46     | expr '+' expr
   47     | expr '-' expr
   48     | expr '*' expr
   49     | expr '/' expr
   50     | expr '%' expr
   51     | expr '<' expr
   52     | expr '>' expr
   53     | expr GREATERTHANOREQUAL expr
   54     | expr LESSTHANOREQUAL expr
   55     | expr NOTEQUAL expr
   56     | expr EQUALEQUAL expr
   57     | LOGICAL_NOT expr
   58     | expr LOGICAL_AND expr
   59     | expr LOGICAL_OR expr

   60 str_expr: VAR
   61         | str_expr VAR

   62 var_expr: VAR
   63         | var_expr '[' expr ']'


Terminals, with rules where they appear

    $end (0) 0
    '"' (34) 32
    '%' (37) 50
    '(' (40) 13 31 32 37 45
    ')' (41) 13 31 32 37 45
    '*' (42) 48
    '+' (43) 46
    ',' (44) 9 10 21
    '-' (45) 43 47
    '/' (47) 49
    ';' (59) 5 16 26 27 28 30 37
    '<' (60) 51
    '=' (61) 34
    '>' (62) 52
    '[' (91) 12 63
    ']' (93) 12 63
    '{' (123) 37
    '}' (125) 37
    error (256) 26
    WRITE <treeNode> (258) 31 32
    DECL <treeNode> (259) 2
    ENDDECL <treeNode> (260) 2
    T_INT <treeNode> (261) 6 19
    T_BOOL <treeNode> (262) 7
    IF <treeNode> (263) 35 36
    ELSE <treeNode> (264) 36
    LOGICAL_AND <treeNode> (265) 58
    LOGICAL_NOT <treeNode> (266) 57
    LOGICAL_OR <treeNode> (267) 59
    EQUALEQUAL <treeNode> (268) 56
    LESSTHANOREQUAL <treeNode> (269) 54
    GREATERTHANOREQUAL <treeNode> (270) 53
    NOTEQUAL <treeNode> (271) 55
    FOR <treeNode> (272) 37
    BREAK_Y <treeNode> (273) 38
    CONTINUE <treeNode> (274) 39
    VAR <entry> (275) 11 13 20 21 60 61 62
    NUM <var> (276) 12 40
    T <b_var> (277) 41
    F <b_var> (278) 42
    THEN <var> (279) 35 36
    ENDIF <var> (280) 35 36
    BEG (281) 23
    END (282) 23


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    Prog (46)
        on left: 1
        on right: 0
    Gdecl_sec (47)
        on left: 2
        on right: 1
    Gdecl_list <treeNode> (48)
        on left: 3 4
        on right: 2 4
    Gdecl <treeNode> (49)
        on left: 5
        on right: 4
    ret_type <treeNode> (50)
        on left: 6 7
        on right: 5
    Glist <treeNode> (51)
        on left: 8 9 10
        on right: 5 9 10
    Gid <treeNode> (52)
        on left: 11 12
        on right: 8 9 12
    func (53)
        on left: 13
        on right: 10
    arg_list (54)
        on left: 14 15
        on right: 13
    arg_list1 (55)
        on left: 16 17
        on right: 15 16
    arg (56)
        on left: 18
        on right: 16 17
    arg_type (57)
        on left: 19
        on right: 18
    var_list (58)
        on left: 20 21
        on right: 18 21
    MainBlock (59)
        on left: 22 23
        on right: 1
    stmt_list <treeNode> (60)
        on left: 24 25 26
        on right: 22 23 25 35 36 37
    statement <treeNode> (61)
        on left: 27 28 29 30
        on right: 25
    write_stmt <treeNode> (62)
        on left: 31 32
        on right: 28
    assign_stmt <treeNode> (63)
        on left: 33 34
        on right: 27 37
    cond_stmt <treeNode> (64)
        on left: 35 36 37
        on right: 29
    control_stmt <treeNode> (65)
        on left: 38 39
        on right: 30
    expr <treeNode> (66)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 31 34 35 36 37 43 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 63
    str_expr <treeNode> (67)
        on left: 60 61
        on right: 32 61
    var_expr <treeNode> (68)
        on left: 62 63
        on right: 34 44 63


State 0

    0 $accept: • Prog $end

    DECL  shift, and go to state 1

    Prog       go to state 2
    Gdecl_sec  go to state 3


State 1

    2 Gdecl_sec: DECL • Gdecl_list ENDDECL

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 6
    Gdecl       go to state 7
    ret_type    go to state 8


State 2

    0 $accept: Prog • $end

    $end  shift, and go to state 9


State 3

    1 Prog: Gdecl_sec • MainBlock

    error     shift, and go to state 10
    WRITE     shift, and go to state 11
    IF        shift, and go to state 12
    FOR       shift, and go to state 13
    BREAK_Y   shift, and go to state 14
    CONTINUE  shift, and go to state 15
    VAR       shift, and go to state 16
    BEG       shift, and go to state 17

    $end  reduce using rule 24 (stmt_list)
    ';'   reduce using rule 33 (assign_stmt)

    MainBlock     go to state 18
    stmt_list     go to state 19
    statement     go to state 20
    write_stmt    go to state 21
    assign_stmt   go to state 22
    cond_stmt     go to state 23
    control_stmt  go to state 24
    var_expr      go to state 25


State 4

    6 ret_type: T_INT •

    $default  reduce using rule 6 (ret_type)


State 5

    7 ret_type: T_BOOL •

    $default  reduce using rule 7 (ret_type)


State 6

    2 Gdecl_sec: DECL Gdecl_list • ENDDECL

    ENDDECL  shift, and go to state 26


State 7

    4 Gdecl_list: Gdecl • Gdecl_list

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 27
    Gdecl       go to state 7
    ret_type    go to state 8


State 8

    5 Gdecl: ret_type • Glist ';'

    VAR  shift, and go to state 28

    Glist  go to state 29
    Gid    go to state 30
    func   go to state 31


State 9

    0 $accept: Prog $end •

    $default  accept


State 10

   26 stmt_list: error • ';'

    ';'  shift, and go to state 32


State 11

   31 write_stmt: WRITE • '(' expr ')'
   32           | WRITE • '(' '"' str_expr '"' ')'

    '('  shift, and go to state 33


State 12

   35 cond_stmt: IF • expr THEN stmt_list ENDIF
   36          | IF • expr THEN stmt_list ELSE stmt_list ENDIF

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 40
    var_expr  go to state 41


State 13

   37 cond_stmt: FOR • '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    '('  shift, and go to state 42


State 14

   38 control_stmt: BREAK_Y •

    $default  reduce using rule 38 (control_stmt)


State 15

   39 control_stmt: CONTINUE •

    $default  reduce using rule 39 (control_stmt)


State 16

   62 var_expr: VAR •

    $default  reduce using rule 62 (var_expr)


State 17

   23 MainBlock: BEG • stmt_list END

    error     shift, and go to state 10
    WRITE     shift, and go to state 11
    IF        shift, and go to state 12
    FOR       shift, and go to state 13
    BREAK_Y   shift, and go to state 14
    CONTINUE  shift, and go to state 15
    VAR       shift, and go to state 16

    END  reduce using rule 24 (stmt_list)
    ';'  reduce using rule 33 (assign_stmt)

    stmt_list     go to state 43
    statement     go to state 20
    write_stmt    go to state 21
    assign_stmt   go to state 22
    cond_stmt     go to state 23
    control_stmt  go to state 24
    var_expr      go to state 25


State 18

    1 Prog: Gdecl_sec MainBlock •

    $default  reduce using rule 1 (Prog)


State 19

   22 MainBlock: stmt_list •

    $default  reduce using rule 22 (MainBlock)


State 20

   25 stmt_list: statement • stmt_list

    error     shift, and go to state 10
    WRITE     shift, and go to state 11
    IF        shift, and go to state 12
    FOR       shift, and go to state 13
    BREAK_Y   shift, and go to state 14
    CONTINUE  shift, and go to state 15
    VAR       shift, and go to state 16

    $end   reduce using rule 24 (stmt_list)
    ELSE   reduce using rule 24 (stmt_list)
    ENDIF  reduce using rule 24 (stmt_list)
    END    reduce using rule 24 (stmt_list)
    ';'    reduce using rule 33 (assign_stmt)
    '}'    reduce using rule 24 (stmt_list)

    stmt_list     go to state 44
    statement     go to state 20
    write_stmt    go to state 21
    assign_stmt   go to state 22
    cond_stmt     go to state 23
    control_stmt  go to state 24
    var_expr      go to state 25


State 21

   28 statement: write_stmt • ';'

    ';'  shift, and go to state 45


State 22

   27 statement: assign_stmt • ';'

    ';'  shift, and go to state 46


State 23

   29 statement: cond_stmt •

    $default  reduce using rule 29 (statement)


State 24

   30 statement: control_stmt • ';'

    ';'  shift, and go to state 47


State 25

   34 assign_stmt: var_expr • '=' expr
   63 var_expr: var_expr • '[' expr ']'

    '='  shift, and go to state 48
    '['  shift, and go to state 49


State 26

    2 Gdecl_sec: DECL Gdecl_list ENDDECL •

    $default  reduce using rule 2 (Gdecl_sec)


State 27

    4 Gdecl_list: Gdecl Gdecl_list •

    $default  reduce using rule 4 (Gdecl_list)


State 28

   11 Gid: VAR •
   13 func: VAR • '(' arg_list ')'

    '('  shift, and go to state 50

    $default  reduce using rule 11 (Gid)


State 29

    5 Gdecl: ret_type Glist • ';'

    ';'  shift, and go to state 51


State 30

    8 Glist: Gid •
    9      | Gid • ',' Glist
   12 Gid: Gid • '[' NUM ']'

    ','  shift, and go to state 52
    '['  shift, and go to state 53

    $default  reduce using rule 8 (Glist)


State 31

   10 Glist: func • ',' Glist

    ','  shift, and go to state 54


State 32

   26 stmt_list: error ';' •

    $default  reduce using rule 26 (stmt_list)


State 33

   31 write_stmt: WRITE '(' • expr ')'
   32           | WRITE '(' • '"' str_expr '"' ')'

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39
    '"'          shift, and go to state 55

    expr      go to state 56
    var_expr  go to state 41


State 34

   57 expr: LOGICAL_NOT • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 57
    var_expr  go to state 41


State 35

   40 expr: NUM •

    $default  reduce using rule 40 (expr)


State 36

   41 expr: T •

    $default  reduce using rule 41 (expr)


State 37

   42 expr: F •

    $default  reduce using rule 42 (expr)


State 38

   43 expr: '-' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 58
    var_expr  go to state 41


State 39

   45 expr: '(' • expr ')'

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 59
    var_expr  go to state 41


State 40

   35 cond_stmt: IF expr • THEN stmt_list ENDIF
   36          | IF expr • THEN stmt_list ELSE stmt_list ENDIF
   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 60
    LOGICAL_OR          shift, and go to state 61
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    THEN                shift, and go to state 66
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73


State 41

   44 expr: var_expr •
   63 var_expr: var_expr • '[' expr ']'

    '['  shift, and go to state 49

    $default  reduce using rule 44 (expr)


State 42

   37 cond_stmt: FOR '(' • assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 16

    $default  reduce using rule 33 (assign_stmt)

    assign_stmt  go to state 74
    var_expr     go to state 25


State 43

   23 MainBlock: BEG stmt_list • END

    END  shift, and go to state 75


State 44

   25 stmt_list: statement stmt_list •

    $default  reduce using rule 25 (stmt_list)


State 45

   28 statement: write_stmt ';' •

    $default  reduce using rule 28 (statement)


State 46

   27 statement: assign_stmt ';' •

    $default  reduce using rule 27 (statement)


State 47

   30 statement: control_stmt ';' •

    $default  reduce using rule 30 (statement)


State 48

   34 assign_stmt: var_expr '=' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 76
    var_expr  go to state 41


State 49

   63 var_expr: var_expr '[' • expr ']'

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 77
    var_expr  go to state 41


State 50

   13 func: VAR '(' • arg_list ')'

    T_INT  shift, and go to state 78

    $default  reduce using rule 14 (arg_list)

    arg_list   go to state 79
    arg_list1  go to state 80
    arg        go to state 81
    arg_type   go to state 82


State 51

    5 Gdecl: ret_type Glist ';' •

    $default  reduce using rule 5 (Gdecl)


State 52

    9 Glist: Gid ',' • Glist

    VAR  shift, and go to state 28

    Glist  go to state 83
    Gid    go to state 30
    func   go to state 31


State 53

   12 Gid: Gid '[' • NUM ']'

    NUM  shift, and go to state 84


State 54

   10 Glist: func ',' • Glist

    VAR  shift, and go to state 28

    Glist  go to state 85
    Gid    go to state 30
    func   go to state 31


State 55

   32 write_stmt: WRITE '(' '"' • str_expr '"' ')'

    VAR  shift, and go to state 86

    str_expr  go to state 87


State 56

   31 write_stmt: WRITE '(' expr • ')'
   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 60
    LOGICAL_OR          shift, and go to state 61
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73
    ')'                 shift, and go to state 88


State 57

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   57     | LOGICAL_NOT expr •
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    $default  reduce using rule 57 (expr)


State 58

   43 expr: '-' expr •
   46     | expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 43 (expr)


State 59

   45 expr: '(' expr • ')'
   46     | expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 60
    LOGICAL_OR          shift, and go to state 61
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73
    ')'                 shift, and go to state 89


State 60

   58 expr: expr LOGICAL_AND • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 90
    var_expr  go to state 41


State 61

   59 expr: expr LOGICAL_OR • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 91
    var_expr  go to state 41


State 62

   56 expr: expr EQUALEQUAL • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 92
    var_expr  go to state 41


State 63

   54 expr: expr LESSTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 93
    var_expr  go to state 41


State 64

   53 expr: expr GREATERTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 94
    var_expr  go to state 41


State 65

   55 expr: expr NOTEQUAL • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 95
    var_expr  go to state 41


State 66

   35 cond_stmt: IF expr THEN • stmt_list ENDIF
   36          | IF expr THEN • stmt_list ELSE stmt_list ENDIF

    error     shift, and go to state 10
    WRITE     shift, and go to state 11
    IF        shift, and go to state 12
    FOR       shift, and go to state 13
    BREAK_Y   shift, and go to state 14
    CONTINUE  shift, and go to state 15
    VAR       shift, and go to state 16

    ELSE   reduce using rule 24 (stmt_list)
    ENDIF  reduce using rule 24 (stmt_list)
    ';'    reduce using rule 33 (assign_stmt)

    stmt_list     go to state 96
    statement     go to state 20
    write_stmt    go to state 21
    assign_stmt   go to state 22
    cond_stmt     go to state 23
    control_stmt  go to state 24
    var_expr      go to state 25


State 67

   51 expr: expr '<' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 97
    var_expr  go to state 41


State 68

   52 expr: expr '>' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 98
    var_expr  go to state 41


State 69

   46 expr: expr '+' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 99
    var_expr  go to state 41


State 70

   47 expr: expr '-' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 100
    var_expr  go to state 41


State 71

   48 expr: expr '*' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 101
    var_expr  go to state 41


State 72

   49 expr: expr '/' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 102
    var_expr  go to state 41


State 73

   50 expr: expr '%' • expr

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 103
    var_expr  go to state 41


State 74

   37 cond_stmt: FOR '(' assign_stmt • ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    ';'  shift, and go to state 104


State 75

   23 MainBlock: BEG stmt_list END •

    $default  reduce using rule 23 (MainBlock)


State 76

   34 assign_stmt: var_expr '=' expr •
   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 60
    LOGICAL_OR          shift, and go to state 61
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73

    $default  reduce using rule 34 (assign_stmt)


State 77

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr
   63 var_expr: var_expr '[' expr • ']'

    LOGICAL_AND         shift, and go to state 60
    LOGICAL_OR          shift, and go to state 61
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73
    ']'                 shift, and go to state 105


State 78

   19 arg_type: T_INT •

    $default  reduce using rule 19 (arg_type)


State 79

   13 func: VAR '(' arg_list • ')'

    ')'  shift, and go to state 106


State 80

   15 arg_list: arg_list1 •
   16 arg_list1: arg_list1 • ';' arg

    ';'  shift, and go to state 107

    $default  reduce using rule 15 (arg_list)


State 81

   17 arg_list1: arg •

    $default  reduce using rule 17 (arg_list1)


State 82

   18 arg: arg_type • var_list

    VAR  shift, and go to state 108

    var_list  go to state 109


State 83

    9 Glist: Gid ',' Glist •

    $default  reduce using rule 9 (Glist)


State 84

   12 Gid: Gid '[' NUM • ']'

    ']'  shift, and go to state 110


State 85

   10 Glist: func ',' Glist •

    $default  reduce using rule 10 (Glist)


State 86

   60 str_expr: VAR •

    $default  reduce using rule 60 (str_expr)


State 87

   32 write_stmt: WRITE '(' '"' str_expr • '"' ')'
   61 str_expr: str_expr • VAR

    VAR  shift, and go to state 111
    '"'  shift, and go to state 112


State 88

   31 write_stmt: WRITE '(' expr ')' •

    $default  reduce using rule 31 (write_stmt)


State 89

   45 expr: '(' expr ')' •

    $default  reduce using rule 45 (expr)


State 90

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   58     | expr LOGICAL_AND expr •
   59     | expr • LOGICAL_OR expr

    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73

    $default  reduce using rule 58 (expr)


State 91

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr
   59     | expr LOGICAL_OR expr •

    LOGICAL_AND         shift, and go to state 60
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73

    $default  reduce using rule 59 (expr)


State 92

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   56     | expr EQUALEQUAL expr •
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 56 (expr)


State 93

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   54     | expr LESSTHANOREQUAL expr •
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 54 (expr)


State 94

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   53     | expr GREATERTHANOREQUAL expr •
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 53 (expr)


State 95

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   55     | expr NOTEQUAL expr •
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 55 (expr)


State 96

   35 cond_stmt: IF expr THEN stmt_list • ENDIF
   36          | IF expr THEN stmt_list • ELSE stmt_list ENDIF

    ELSE   shift, and go to state 113
    ENDIF  shift, and go to state 114


State 97

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   51     | expr '<' expr •
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 51 (expr)


State 98

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   52     | expr '>' expr •
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 52 (expr)


State 99

   46 expr: expr • '+' expr
   46     | expr '+' expr •
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 46 (expr)


State 100

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   47     | expr '-' expr •
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 47 (expr)


State 101

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   48     | expr '*' expr •
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    $default  reduce using rule 48 (expr)


State 102

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   49     | expr '/' expr •
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    $default  reduce using rule 49 (expr)


State 103

   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   50     | expr '%' expr •
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    $default  reduce using rule 50 (expr)


State 104

   37 cond_stmt: FOR '(' assign_stmt ';' • expr ';' assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 34
    VAR          shift, and go to state 16
    NUM          shift, and go to state 35
    T            shift, and go to state 36
    F            shift, and go to state 37
    '-'          shift, and go to state 38
    '('          shift, and go to state 39

    expr      go to state 115
    var_expr  go to state 41


State 105

   63 var_expr: var_expr '[' expr ']' •

    $default  reduce using rule 63 (var_expr)


State 106

   13 func: VAR '(' arg_list ')' •

    $default  reduce using rule 13 (func)


State 107

   16 arg_list1: arg_list1 ';' • arg

    T_INT  shift, and go to state 78

    arg       go to state 116
    arg_type  go to state 82


State 108

   20 var_list: VAR •
   21         | VAR • ',' var_list

    ','  shift, and go to state 117

    $default  reduce using rule 20 (var_list)


State 109

   18 arg: arg_type var_list •

    $default  reduce using rule 18 (arg)


State 110

   12 Gid: Gid '[' NUM ']' •

    $default  reduce using rule 12 (Gid)


State 111

   61 str_expr: str_expr VAR •

    $default  reduce using rule 61 (str_expr)


State 112

   32 write_stmt: WRITE '(' '"' str_expr '"' • ')'

    ')'  shift, and go to state 118


State 113

   36 cond_stmt: IF expr THEN stmt_list ELSE • stmt_list ENDIF

    error     shift, and go to state 10
    WRITE     shift, and go to state 11
    IF        shift, and go to state 12
    FOR       shift, and go to state 13
    BREAK_Y   shift, and go to state 14
    CONTINUE  shift, and go to state 15
    VAR       shift, and go to state 16

    ENDIF  reduce using rule 24 (stmt_list)
    ';'    reduce using rule 33 (assign_stmt)

    stmt_list     go to state 119
    statement     go to state 20
    write_stmt    go to state 21
    assign_stmt   go to state 22
    cond_stmt     go to state 23
    control_stmt  go to state 24
    var_expr      go to state 25


State 114

   35 cond_stmt: IF expr THEN stmt_list ENDIF •

    $default  reduce using rule 35 (cond_stmt)


State 115

   37 cond_stmt: FOR '(' assign_stmt ';' expr • ';' assign_stmt ')' '{' stmt_list '}'
   46 expr: expr • '+' expr
   47     | expr • '-' expr
   48     | expr • '*' expr
   49     | expr • '/' expr
   50     | expr • '%' expr
   51     | expr • '<' expr
   52     | expr • '>' expr
   53     | expr • GREATERTHANOREQUAL expr
   54     | expr • LESSTHANOREQUAL expr
   55     | expr • NOTEQUAL expr
   56     | expr • EQUALEQUAL expr
   58     | expr • LOGICAL_AND expr
   59     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 60
    LOGICAL_OR          shift, and go to state 61
    EQUALEQUAL          shift, and go to state 62
    LESSTHANOREQUAL     shift, and go to state 63
    GREATERTHANOREQUAL  shift, and go to state 64
    NOTEQUAL            shift, and go to state 65
    '<'                 shift, and go to state 67
    '>'                 shift, and go to state 68
    '+'                 shift, and go to state 69
    '-'                 shift, and go to state 70
    '*'                 shift, and go to state 71
    '/'                 shift, and go to state 72
    '%'                 shift, and go to state 73
    ';'                 shift, and go to state 120


State 116

   16 arg_list1: arg_list1 ';' arg •

    $default  reduce using rule 16 (arg_list1)


State 117

   21 var_list: VAR ',' • var_list

    VAR  shift, and go to state 108

    var_list  go to state 121


State 118

   32 write_stmt: WRITE '(' '"' str_expr '"' ')' •

    $default  reduce using rule 32 (write_stmt)


State 119

   36 cond_stmt: IF expr THEN stmt_list ELSE stmt_list • ENDIF

    ENDIF  shift, and go to state 122


State 120

   37 cond_stmt: FOR '(' assign_stmt ';' expr ';' • assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 16

    $default  reduce using rule 33 (assign_stmt)

    assign_stmt  go to state 123
    var_expr     go to state 25


State 121

   21 var_list: VAR ',' var_list •

    $default  reduce using rule 21 (var_list)


State 122

   36 cond_stmt: IF expr THEN stmt_list ELSE stmt_list ENDIF •

    $default  reduce using rule 36 (cond_stmt)


State 123

   37 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt • ')' '{' stmt_list '}'

    ')'  shift, and go to state 124


State 124

   37 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' • '{' stmt_list '}'

    '{'  shift, and go to state 125


State 125

   37 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' • stmt_list '}'

    error     shift, and go to state 10
    WRITE     shift, and go to state 11
    IF        shift, and go to state 12
    FOR       shift, and go to state 13
    BREAK_Y   shift, and go to state 14
    CONTINUE  shift, and go to state 15
    VAR       shift, and go to state 16

    ';'  reduce using rule 33 (assign_stmt)
    '}'  reduce using rule 24 (stmt_list)

    stmt_list     go to state 126
    statement     go to state 20
    write_stmt    go to state 21
    assign_stmt   go to state 22
    cond_stmt     go to state 23
    control_stmt  go to state 24
    var_expr      go to state 25


State 126

   37 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list • '}'

    '}'  shift, and go to state 127


State 127

   37 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}' •

    $default  reduce using rule 37 (cond_stmt)
