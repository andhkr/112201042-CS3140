Grammar

    0 $accept: Prog $end

    1 Prog: Gdecl_sec MainBlock

    2 Gdecl_sec: DECL Gdecl_list ENDDECL

    3 Gdecl_list: ε
    4           | Gdecl Gdecl_list

    5 Gdecl: ret_type Glist ';'

    6 ret_type: T_INT
    7         | T_BOOL

    8 Glist: Gid
    9      | Gid ',' Glist
   10      | func ',' Glist

   11 Gid: VAR
   12    | Gid '[' NUM ']'

   13 func: VAR '(' arg_list ')'

   14 arg_list: ε
   15         | arg_list1

   16 arg_list1: arg_list1 ';' arg
   17          | arg

   18 arg: arg_type var_list

   19 arg_type: T_INT

   20 var_list: VAR
   21         | VAR ',' var_list

   22 MainBlock: BEG stmt_list END

   23 stmt_list: ε
   24          | statement stmt_list
   25          | error ';'

   26 statement: assign_stmt ';'
   27          | write_stmt ';'
   28          | cond_stmt
   29          | control_stmt ';'

   30 write_stmt: WRITE '(' expr ')'
   31           | WRITE '(' '"' str_expr '"' ')'

   32 assign_stmt: ε
   33            | var_expr '=' expr

   34 cond_stmt: IF expr THEN stmt_list ENDIF
   35          | IF expr THEN stmt_list ELSE stmt_list ENDIF
   36          | FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

   37 control_stmt: BREAK_Y

   38 expr: NUM
   39     | T
   40     | F
   41     | '-' expr
   42     | var_expr
   43     | '(' expr ')'
   44     | expr '+' expr
   45     | expr '-' expr
   46     | expr '*' expr
   47     | expr '/' expr
   48     | expr '%' expr
   49     | expr '<' expr
   50     | expr '>' expr
   51     | expr GREATERTHANOREQUAL expr
   52     | expr LESSTHANOREQUAL expr
   53     | expr NOTEQUAL expr
   54     | expr EQUALEQUAL expr
   55     | LOGICAL_NOT expr
   56     | expr LOGICAL_AND expr
   57     | expr LOGICAL_OR expr

   58 str_expr: VAR
   59         | str_expr VAR

   60 var_expr: VAR
   61         | var_expr '[' expr ']'


Terminals, with rules where they appear

    $end (0) 0
    '"' (34) 31
    '%' (37) 48
    '(' (40) 13 30 31 36 43
    ')' (41) 13 30 31 36 43
    '*' (42) 46
    '+' (43) 44
    ',' (44) 9 10 21
    '-' (45) 41 45
    '/' (47) 47
    ';' (59) 5 16 25 26 27 29 36
    '<' (60) 49
    '=' (61) 33
    '>' (62) 50
    '[' (91) 12 61
    ']' (93) 12 61
    '{' (123) 36
    '}' (125) 36
    error (256) 25
    WRITE <treeNode> (258) 30 31
    DECL <treeNode> (259) 2
    ENDDECL <treeNode> (260) 2
    T_INT <treeNode> (261) 6 19
    T_BOOL <treeNode> (262) 7
    IF <treeNode> (263) 34 35
    ELSE <treeNode> (264) 35
    LOGICAL_AND <treeNode> (265) 56
    LOGICAL_NOT <treeNode> (266) 55
    LOGICAL_OR <treeNode> (267) 57
    EQUALEQUAL <treeNode> (268) 54
    LESSTHANOREQUAL <treeNode> (269) 52
    GREATERTHANOREQUAL <treeNode> (270) 51
    NOTEQUAL <treeNode> (271) 53
    FOR <treeNode> (272) 36
    BREAK_Y <treeNode> (273) 37
    VAR <entry> (274) 11 13 20 21 58 59 60
    NUM <var> (275) 12 38
    T <b_var> (276) 39
    F <b_var> (277) 40
    THEN <var> (278) 34 35
    ENDIF <var> (279) 34 35
    BEG (280) 22
    END (281) 22


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    Prog (45)
        on left: 1
        on right: 0
    Gdecl_sec (46)
        on left: 2
        on right: 1
    Gdecl_list <treeNode> (47)
        on left: 3 4
        on right: 2 4
    Gdecl <treeNode> (48)
        on left: 5
        on right: 4
    ret_type <treeNode> (49)
        on left: 6 7
        on right: 5
    Glist <treeNode> (50)
        on left: 8 9 10
        on right: 5 9 10
    Gid <treeNode> (51)
        on left: 11 12
        on right: 8 9 12
    func (52)
        on left: 13
        on right: 10
    arg_list (53)
        on left: 14 15
        on right: 13
    arg_list1 (54)
        on left: 16 17
        on right: 15 16
    arg (55)
        on left: 18
        on right: 16 17
    arg_type (56)
        on left: 19
        on right: 18
    var_list (57)
        on left: 20 21
        on right: 18 21
    MainBlock (58)
        on left: 22
        on right: 1
    stmt_list <treeNode> (59)
        on left: 23 24 25
        on right: 22 24 34 35 36
    statement <treeNode> (60)
        on left: 26 27 28 29
        on right: 24
    write_stmt <treeNode> (61)
        on left: 30 31
        on right: 27
    assign_stmt <treeNode> (62)
        on left: 32 33
        on right: 26 36
    cond_stmt <treeNode> (63)
        on left: 34 35 36
        on right: 28
    control_stmt <treeNode> (64)
        on left: 37
        on right: 29
    expr <treeNode> (65)
        on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
        on right: 30 33 34 35 36 41 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 61
    str_expr <treeNode> (66)
        on left: 58 59
        on right: 31 59
    var_expr <treeNode> (67)
        on left: 60 61
        on right: 33 42 61


State 0

    0 $accept: • Prog $end

    DECL  shift, and go to state 1

    Prog       go to state 2
    Gdecl_sec  go to state 3


State 1

    2 Gdecl_sec: DECL • Gdecl_list ENDDECL

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 6
    Gdecl       go to state 7
    ret_type    go to state 8


State 2

    0 $accept: Prog • $end

    $end  shift, and go to state 9


State 3

    1 Prog: Gdecl_sec • MainBlock

    BEG  shift, and go to state 10

    MainBlock  go to state 11


State 4

    6 ret_type: T_INT •

    $default  reduce using rule 6 (ret_type)


State 5

    7 ret_type: T_BOOL •

    $default  reduce using rule 7 (ret_type)


State 6

    2 Gdecl_sec: DECL Gdecl_list • ENDDECL

    ENDDECL  shift, and go to state 12


State 7

    4 Gdecl_list: Gdecl • Gdecl_list

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 13
    Gdecl       go to state 7
    ret_type    go to state 8


State 8

    5 Gdecl: ret_type • Glist ';'

    VAR  shift, and go to state 14

    Glist  go to state 15
    Gid    go to state 16
    func   go to state 17


State 9

    0 $accept: Prog $end •

    $default  accept


State 10

   22 MainBlock: BEG • stmt_list END

    error    shift, and go to state 18
    WRITE    shift, and go to state 19
    IF       shift, and go to state 20
    FOR      shift, and go to state 21
    BREAK_Y  shift, and go to state 22
    VAR      shift, and go to state 23

    END  reduce using rule 23 (stmt_list)
    ';'  reduce using rule 32 (assign_stmt)

    stmt_list     go to state 24
    statement     go to state 25
    write_stmt    go to state 26
    assign_stmt   go to state 27
    cond_stmt     go to state 28
    control_stmt  go to state 29
    var_expr      go to state 30


State 11

    1 Prog: Gdecl_sec MainBlock •

    $default  reduce using rule 1 (Prog)


State 12

    2 Gdecl_sec: DECL Gdecl_list ENDDECL •

    $default  reduce using rule 2 (Gdecl_sec)


State 13

    4 Gdecl_list: Gdecl Gdecl_list •

    $default  reduce using rule 4 (Gdecl_list)


State 14

   11 Gid: VAR •
   13 func: VAR • '(' arg_list ')'

    '('  shift, and go to state 31

    $default  reduce using rule 11 (Gid)


State 15

    5 Gdecl: ret_type Glist • ';'

    ';'  shift, and go to state 32


State 16

    8 Glist: Gid •
    9      | Gid • ',' Glist
   12 Gid: Gid • '[' NUM ']'

    ','  shift, and go to state 33
    '['  shift, and go to state 34

    $default  reduce using rule 8 (Glist)


State 17

   10 Glist: func • ',' Glist

    ','  shift, and go to state 35


State 18

   25 stmt_list: error • ';'

    ';'  shift, and go to state 36


State 19

   30 write_stmt: WRITE • '(' expr ')'
   31           | WRITE • '(' '"' str_expr '"' ')'

    '('  shift, and go to state 37


State 20

   34 cond_stmt: IF • expr THEN stmt_list ENDIF
   35          | IF • expr THEN stmt_list ELSE stmt_list ENDIF

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 44
    var_expr  go to state 45


State 21

   36 cond_stmt: FOR • '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    '('  shift, and go to state 46


State 22

   37 control_stmt: BREAK_Y •

    $default  reduce using rule 37 (control_stmt)


State 23

   60 var_expr: VAR •

    $default  reduce using rule 60 (var_expr)


State 24

   22 MainBlock: BEG stmt_list • END

    END  shift, and go to state 47


State 25

   24 stmt_list: statement • stmt_list

    error    shift, and go to state 18
    WRITE    shift, and go to state 19
    IF       shift, and go to state 20
    FOR      shift, and go to state 21
    BREAK_Y  shift, and go to state 22
    VAR      shift, and go to state 23

    ELSE   reduce using rule 23 (stmt_list)
    ENDIF  reduce using rule 23 (stmt_list)
    END    reduce using rule 23 (stmt_list)
    ';'    reduce using rule 32 (assign_stmt)
    '}'    reduce using rule 23 (stmt_list)

    stmt_list     go to state 48
    statement     go to state 25
    write_stmt    go to state 26
    assign_stmt   go to state 27
    cond_stmt     go to state 28
    control_stmt  go to state 29
    var_expr      go to state 30


State 26

   27 statement: write_stmt • ';'

    ';'  shift, and go to state 49


State 27

   26 statement: assign_stmt • ';'

    ';'  shift, and go to state 50


State 28

   28 statement: cond_stmt •

    $default  reduce using rule 28 (statement)


State 29

   29 statement: control_stmt • ';'

    ';'  shift, and go to state 51


State 30

   33 assign_stmt: var_expr • '=' expr
   61 var_expr: var_expr • '[' expr ']'

    '='  shift, and go to state 52
    '['  shift, and go to state 53


State 31

   13 func: VAR '(' • arg_list ')'

    T_INT  shift, and go to state 54

    $default  reduce using rule 14 (arg_list)

    arg_list   go to state 55
    arg_list1  go to state 56
    arg        go to state 57
    arg_type   go to state 58


State 32

    5 Gdecl: ret_type Glist ';' •

    $default  reduce using rule 5 (Gdecl)


State 33

    9 Glist: Gid ',' • Glist

    VAR  shift, and go to state 14

    Glist  go to state 59
    Gid    go to state 16
    func   go to state 17


State 34

   12 Gid: Gid '[' • NUM ']'

    NUM  shift, and go to state 60


State 35

   10 Glist: func ',' • Glist

    VAR  shift, and go to state 14

    Glist  go to state 61
    Gid    go to state 16
    func   go to state 17


State 36

   25 stmt_list: error ';' •

    $default  reduce using rule 25 (stmt_list)


State 37

   30 write_stmt: WRITE '(' • expr ')'
   31           | WRITE '(' • '"' str_expr '"' ')'

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43
    '"'          shift, and go to state 62

    expr      go to state 63
    var_expr  go to state 45


State 38

   55 expr: LOGICAL_NOT • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 64
    var_expr  go to state 45


State 39

   38 expr: NUM •

    $default  reduce using rule 38 (expr)


State 40

   39 expr: T •

    $default  reduce using rule 39 (expr)


State 41

   40 expr: F •

    $default  reduce using rule 40 (expr)


State 42

   41 expr: '-' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 65
    var_expr  go to state 45


State 43

   43 expr: '(' • expr ')'

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 66
    var_expr  go to state 45


State 44

   34 cond_stmt: IF expr • THEN stmt_list ENDIF
   35          | IF expr • THEN stmt_list ELSE stmt_list ENDIF
   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    THEN                shift, and go to state 73
    '<'                 shift, and go to state 74
    '>'                 shift, and go to state 75
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80


State 45

   42 expr: var_expr •
   61 var_expr: var_expr • '[' expr ']'

    '['  shift, and go to state 53

    $default  reduce using rule 42 (expr)


State 46

   36 cond_stmt: FOR '(' • assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 23

    $default  reduce using rule 32 (assign_stmt)

    assign_stmt  go to state 81
    var_expr     go to state 30


State 47

   22 MainBlock: BEG stmt_list END •

    $default  reduce using rule 22 (MainBlock)


State 48

   24 stmt_list: statement stmt_list •

    $default  reduce using rule 24 (stmt_list)


State 49

   27 statement: write_stmt ';' •

    $default  reduce using rule 27 (statement)


State 50

   26 statement: assign_stmt ';' •

    $default  reduce using rule 26 (statement)


State 51

   29 statement: control_stmt ';' •

    $default  reduce using rule 29 (statement)


State 52

   33 assign_stmt: var_expr '=' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 82
    var_expr  go to state 45


State 53

   61 var_expr: var_expr '[' • expr ']'

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 83
    var_expr  go to state 45


State 54

   19 arg_type: T_INT •

    $default  reduce using rule 19 (arg_type)


State 55

   13 func: VAR '(' arg_list • ')'

    ')'  shift, and go to state 84


State 56

   15 arg_list: arg_list1 •
   16 arg_list1: arg_list1 • ';' arg

    ';'  shift, and go to state 85

    $default  reduce using rule 15 (arg_list)


State 57

   17 arg_list1: arg •

    $default  reduce using rule 17 (arg_list1)


State 58

   18 arg: arg_type • var_list

    VAR  shift, and go to state 86

    var_list  go to state 87


State 59

    9 Glist: Gid ',' Glist •

    $default  reduce using rule 9 (Glist)


State 60

   12 Gid: Gid '[' NUM • ']'

    ']'  shift, and go to state 88


State 61

   10 Glist: func ',' Glist •

    $default  reduce using rule 10 (Glist)


State 62

   31 write_stmt: WRITE '(' '"' • str_expr '"' ')'

    VAR  shift, and go to state 89

    str_expr  go to state 90


State 63

   30 write_stmt: WRITE '(' expr • ')'
   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '<'                 shift, and go to state 74
    '>'                 shift, and go to state 75
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80
    ')'                 shift, and go to state 91


State 64

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   55     | LOGICAL_NOT expr •
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    $default  reduce using rule 55 (expr)


State 65

   41 expr: '-' expr •
   44     | expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 41 (expr)


State 66

   43 expr: '(' expr • ')'
   44     | expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '<'                 shift, and go to state 74
    '>'                 shift, and go to state 75
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80
    ')'                 shift, and go to state 92


State 67

   56 expr: expr LOGICAL_AND • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 93
    var_expr  go to state 45


State 68

   57 expr: expr LOGICAL_OR • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 94
    var_expr  go to state 45


State 69

   54 expr: expr EQUALEQUAL • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 95
    var_expr  go to state 45


State 70

   52 expr: expr LESSTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 96
    var_expr  go to state 45


State 71

   51 expr: expr GREATERTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 97
    var_expr  go to state 45


State 72

   53 expr: expr NOTEQUAL • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 98
    var_expr  go to state 45


State 73

   34 cond_stmt: IF expr THEN • stmt_list ENDIF
   35          | IF expr THEN • stmt_list ELSE stmt_list ENDIF

    error    shift, and go to state 18
    WRITE    shift, and go to state 19
    IF       shift, and go to state 20
    FOR      shift, and go to state 21
    BREAK_Y  shift, and go to state 22
    VAR      shift, and go to state 23

    ELSE   reduce using rule 23 (stmt_list)
    ENDIF  reduce using rule 23 (stmt_list)
    ';'    reduce using rule 32 (assign_stmt)

    stmt_list     go to state 99
    statement     go to state 25
    write_stmt    go to state 26
    assign_stmt   go to state 27
    cond_stmt     go to state 28
    control_stmt  go to state 29
    var_expr      go to state 30


State 74

   49 expr: expr '<' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 100
    var_expr  go to state 45


State 75

   50 expr: expr '>' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 101
    var_expr  go to state 45


State 76

   44 expr: expr '+' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 102
    var_expr  go to state 45


State 77

   45 expr: expr '-' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 103
    var_expr  go to state 45


State 78

   46 expr: expr '*' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 104
    var_expr  go to state 45


State 79

   47 expr: expr '/' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 105
    var_expr  go to state 45


State 80

   48 expr: expr '%' • expr

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 106
    var_expr  go to state 45


State 81

   36 cond_stmt: FOR '(' assign_stmt • ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    ';'  shift, and go to state 107


State 82

   33 assign_stmt: var_expr '=' expr •
   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '<'                 shift, and go to state 74
    '>'                 shift, and go to state 75
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80

    $default  reduce using rule 33 (assign_stmt)


State 83

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr
   61 var_expr: var_expr '[' expr • ']'

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '<'                 shift, and go to state 74
    '>'                 shift, and go to state 75
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80
    ']'                 shift, and go to state 108


State 84

   13 func: VAR '(' arg_list ')' •

    $default  reduce using rule 13 (func)


State 85

   16 arg_list1: arg_list1 ';' • arg

    T_INT  shift, and go to state 54

    arg       go to state 109
    arg_type  go to state 58


State 86

   20 var_list: VAR •
   21         | VAR • ',' var_list

    ','  shift, and go to state 110

    $default  reduce using rule 20 (var_list)


State 87

   18 arg: arg_type var_list •

    $default  reduce using rule 18 (arg)


State 88

   12 Gid: Gid '[' NUM ']' •

    $default  reduce using rule 12 (Gid)


State 89

   58 str_expr: VAR •

    $default  reduce using rule 58 (str_expr)


State 90

   31 write_stmt: WRITE '(' '"' str_expr • '"' ')'
   59 str_expr: str_expr • VAR

    VAR  shift, and go to state 111
    '"'  shift, and go to state 112


State 91

   30 write_stmt: WRITE '(' expr ')' •

    $default  reduce using rule 30 (write_stmt)


State 92

   43 expr: '(' expr ')' •

    $default  reduce using rule 43 (expr)


State 93

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   56     | expr LOGICAL_AND expr •
   57     | expr • LOGICAL_OR expr

    $default  reduce using rule 56 (expr)


State 94

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr
   57     | expr LOGICAL_OR expr •

    $default  reduce using rule 57 (expr)


State 95

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   54     | expr EQUALEQUAL expr •
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '+'          shift, and go to state 76
    '-'          shift, and go to state 77
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 54 (expr)


State 96

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   52     | expr LESSTHANOREQUAL expr •
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '+'          shift, and go to state 76
    '-'          shift, and go to state 77
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 52 (expr)


State 97

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   51     | expr GREATERTHANOREQUAL expr •
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '+'          shift, and go to state 76
    '-'          shift, and go to state 77
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 51 (expr)


State 98

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   53     | expr NOTEQUAL expr •
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '+'          shift, and go to state 76
    '-'          shift, and go to state 77
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 53 (expr)


State 99

   34 cond_stmt: IF expr THEN stmt_list • ENDIF
   35          | IF expr THEN stmt_list • ELSE stmt_list ENDIF

    ELSE   shift, and go to state 113
    ENDIF  shift, and go to state 114


State 100

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   49     | expr '<' expr •
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80

    $default  reduce using rule 49 (expr)


State 101

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   50     | expr '>' expr •
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80

    $default  reduce using rule 50 (expr)


State 102

   44 expr: expr • '+' expr
   44     | expr '+' expr •
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 44 (expr)


State 103

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   45     | expr '-' expr •
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '*'          shift, and go to state 78
    '/'          shift, and go to state 79
    '%'          shift, and go to state 80

    $default  reduce using rule 45 (expr)


State 104

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   46     | expr '*' expr •
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '%'          shift, and go to state 80

    $default  reduce using rule 46 (expr)


State 105

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   47     | expr '/' expr •
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68
    '%'          shift, and go to state 80

    $default  reduce using rule 47 (expr)


State 106

   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   48     | expr '%' expr •
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 67
    LOGICAL_OR   shift, and go to state 68

    $default  reduce using rule 48 (expr)


State 107

   36 cond_stmt: FOR '(' assign_stmt ';' • expr ';' assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 38
    VAR          shift, and go to state 23
    NUM          shift, and go to state 39
    T            shift, and go to state 40
    F            shift, and go to state 41
    '-'          shift, and go to state 42
    '('          shift, and go to state 43

    expr      go to state 115
    var_expr  go to state 45


State 108

   61 var_expr: var_expr '[' expr ']' •

    $default  reduce using rule 61 (var_expr)


State 109

   16 arg_list1: arg_list1 ';' arg •

    $default  reduce using rule 16 (arg_list1)


State 110

   21 var_list: VAR ',' • var_list

    VAR  shift, and go to state 86

    var_list  go to state 116


State 111

   59 str_expr: str_expr VAR •

    $default  reduce using rule 59 (str_expr)


State 112

   31 write_stmt: WRITE '(' '"' str_expr '"' • ')'

    ')'  shift, and go to state 117


State 113

   35 cond_stmt: IF expr THEN stmt_list ELSE • stmt_list ENDIF

    error    shift, and go to state 18
    WRITE    shift, and go to state 19
    IF       shift, and go to state 20
    FOR      shift, and go to state 21
    BREAK_Y  shift, and go to state 22
    VAR      shift, and go to state 23

    ENDIF  reduce using rule 23 (stmt_list)
    ';'    reduce using rule 32 (assign_stmt)

    stmt_list     go to state 118
    statement     go to state 25
    write_stmt    go to state 26
    assign_stmt   go to state 27
    cond_stmt     go to state 28
    control_stmt  go to state 29
    var_expr      go to state 30


State 114

   34 cond_stmt: IF expr THEN stmt_list ENDIF •

    $default  reduce using rule 34 (cond_stmt)


State 115

   36 cond_stmt: FOR '(' assign_stmt ';' expr • ';' assign_stmt ')' '{' stmt_list '}'
   44 expr: expr • '+' expr
   45     | expr • '-' expr
   46     | expr • '*' expr
   47     | expr • '/' expr
   48     | expr • '%' expr
   49     | expr • '<' expr
   50     | expr • '>' expr
   51     | expr • GREATERTHANOREQUAL expr
   52     | expr • LESSTHANOREQUAL expr
   53     | expr • NOTEQUAL expr
   54     | expr • EQUALEQUAL expr
   56     | expr • LOGICAL_AND expr
   57     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 67
    LOGICAL_OR          shift, and go to state 68
    EQUALEQUAL          shift, and go to state 69
    LESSTHANOREQUAL     shift, and go to state 70
    GREATERTHANOREQUAL  shift, and go to state 71
    NOTEQUAL            shift, and go to state 72
    '<'                 shift, and go to state 74
    '>'                 shift, and go to state 75
    '+'                 shift, and go to state 76
    '-'                 shift, and go to state 77
    '*'                 shift, and go to state 78
    '/'                 shift, and go to state 79
    '%'                 shift, and go to state 80
    ';'                 shift, and go to state 119


State 116

   21 var_list: VAR ',' var_list •

    $default  reduce using rule 21 (var_list)


State 117

   31 write_stmt: WRITE '(' '"' str_expr '"' ')' •

    $default  reduce using rule 31 (write_stmt)


State 118

   35 cond_stmt: IF expr THEN stmt_list ELSE stmt_list • ENDIF

    ENDIF  shift, and go to state 120


State 119

   36 cond_stmt: FOR '(' assign_stmt ';' expr ';' • assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 23

    $default  reduce using rule 32 (assign_stmt)

    assign_stmt  go to state 121
    var_expr     go to state 30


State 120

   35 cond_stmt: IF expr THEN stmt_list ELSE stmt_list ENDIF •

    $default  reduce using rule 35 (cond_stmt)


State 121

   36 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt • ')' '{' stmt_list '}'

    ')'  shift, and go to state 122


State 122

   36 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' • '{' stmt_list '}'

    '{'  shift, and go to state 123


State 123

   36 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' • stmt_list '}'

    error    shift, and go to state 18
    WRITE    shift, and go to state 19
    IF       shift, and go to state 20
    FOR      shift, and go to state 21
    BREAK_Y  shift, and go to state 22
    VAR      shift, and go to state 23

    ';'  reduce using rule 32 (assign_stmt)
    '}'  reduce using rule 23 (stmt_list)

    stmt_list     go to state 124
    statement     go to state 25
    write_stmt    go to state 26
    assign_stmt   go to state 27
    cond_stmt     go to state 28
    control_stmt  go to state 29
    var_expr      go to state 30


State 124

   36 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list • '}'

    '}'  shift, and go to state 125


State 125

   36 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}' •

    $default  reduce using rule 36 (cond_stmt)
