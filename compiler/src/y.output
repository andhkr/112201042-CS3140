Grammar

    0 $accept: Prog $end

    1 Prog: Gdecl_sec MainBlock

    2 Gdecl_sec: DECL Gdecl_list ENDDECL

    3 Gdecl_list: ε
    4           | Gdecl Gdecl_list

    5 Gdecl: ret_type Glist ';'

    6 ret_type: T_INT
    7         | T_BOOL

    8 Glist: Gid
    9      | Gid ',' Glist
   10      | func ',' Glist

   11 Gid: VAR
   12    | Gid '[' NUM ']'

   13 func: VAR '(' arg_list ')'

   14 arg_list: ε
   15         | arg_list1

   16 arg_list1: arg_list1 ';' arg
   17          | arg

   18 arg: arg_type var_list

   19 arg_type: T_INT

   20 var_list: VAR
   21         | VAR ',' var_list

   22 MainBlock: stmt_list
   23          | BEG stmt_list END

   24 stmt_list: ε
   25          | statement stmt_list
   26          | error ';'

   27 statement: assign_stmt ';'
   28          | write_stmt ';'
   29          | cond_stmt
   30          | control_stmt ';'
   31          | read_stmt ';'

   32 write_stmt: WRITE '(' param_list ')'
   33           | WRITE '(' '"' str_expr '"' ')'

   34 read_stmt: READ '(' param_list ')'

   35 assign_stmt: ε
   36            | expr '+' '+'
   37            | var_expr '=' expr

   38 cond_stmt: IF expr THEN stmt_list ENDIF
   39          | IF expr THEN stmt_list ELSE stmt_list ENDIF
   40          | FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

   41 control_stmt: BREAK_Y
   42             | CONTINUE

   43 param_list: ε
   44           | param_list1

   45 param_list1: para
   46            | para ',' param_list1

   47 para: expr

   48 expr: NUM
   49     | T
   50     | F
   51     | '-' expr
   52     | var_expr
   53     | '(' expr ')'
   54     | expr '+' expr
   55     | expr '-' expr
   56     | expr '*' expr
   57     | expr '/' expr
   58     | expr '%' expr
   59     | expr '<' expr
   60     | expr '>' expr
   61     | expr GREATERTHANOREQUAL expr
   62     | expr LESSTHANOREQUAL expr
   63     | expr NOTEQUAL expr
   64     | expr EQUALEQUAL expr
   65     | LOGICAL_NOT expr
   66     | expr LOGICAL_AND expr
   67     | expr LOGICAL_OR expr

   68 str_expr: VAR
   69         | str_expr VAR

   70 var_expr: VAR
   71         | var_expr '[' expr ']'


Terminals, with rules where they appear

    $end (0) 0
    '"' (34) 33
    '%' (37) 58
    '(' (40) 13 32 33 34 40 53
    ')' (41) 13 32 33 34 40 53
    '*' (42) 56
    '+' (43) 36 54
    ',' (44) 9 10 21 46
    '-' (45) 51 55
    '/' (47) 57
    ';' (59) 5 16 26 27 28 30 31 40
    '<' (60) 59
    '=' (61) 37
    '>' (62) 60
    '[' (91) 12 71
    ']' (93) 12 71
    '{' (123) 40
    '}' (125) 40
    error (256) 26
    WRITE <treeNode> (258) 32 33
    DECL <treeNode> (259) 2
    ENDDECL <treeNode> (260) 2
    T_INT <treeNode> (261) 6 19
    T_BOOL <treeNode> (262) 7
    READ <treeNode> (263) 34
    IF <treeNode> (264) 38 39
    ELSE <treeNode> (265) 39
    LOGICAL_AND <treeNode> (266) 66
    LOGICAL_NOT <treeNode> (267) 65
    LOGICAL_OR <treeNode> (268) 67
    EQUALEQUAL <treeNode> (269) 64
    LESSTHANOREQUAL <treeNode> (270) 62
    GREATERTHANOREQUAL <treeNode> (271) 61
    NOTEQUAL <treeNode> (272) 63
    FOR <treeNode> (273) 40
    BREAK_Y <treeNode> (274) 41
    CONTINUE <treeNode> (275) 42
    VAR <entry> (276) 11 13 20 21 68 69 70
    NUM <var> (277) 12 48
    T <b_var> (278) 49
    F <b_var> (279) 50
    THEN <var> (280) 38 39
    ENDIF <var> (281) 38 39
    BEG (282) 23
    END (283) 23


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    Prog (47)
        on left: 1
        on right: 0
    Gdecl_sec (48)
        on left: 2
        on right: 1
    Gdecl_list <treeNode> (49)
        on left: 3 4
        on right: 2 4
    Gdecl <treeNode> (50)
        on left: 5
        on right: 4
    ret_type <treeNode> (51)
        on left: 6 7
        on right: 5
    Glist <treeNode> (52)
        on left: 8 9 10
        on right: 5 9 10
    Gid <treeNode> (53)
        on left: 11 12
        on right: 8 9 12
    func (54)
        on left: 13
        on right: 10
    arg_list (55)
        on left: 14 15
        on right: 13
    arg_list1 (56)
        on left: 16 17
        on right: 15 16
    arg (57)
        on left: 18
        on right: 16 17
    arg_type (58)
        on left: 19
        on right: 18
    var_list (59)
        on left: 20 21
        on right: 18 21
    MainBlock (60)
        on left: 22 23
        on right: 1
    stmt_list <treeNode> (61)
        on left: 24 25 26
        on right: 22 23 25 38 39 40
    statement <treeNode> (62)
        on left: 27 28 29 30 31
        on right: 25
    write_stmt <treeNode> (63)
        on left: 32 33
        on right: 28
    read_stmt <treeNode> (64)
        on left: 34
        on right: 31
    assign_stmt <treeNode> (65)
        on left: 35 36 37
        on right: 27 40
    cond_stmt <treeNode> (66)
        on left: 38 39 40
        on right: 29
    control_stmt <treeNode> (67)
        on left: 41 42
        on right: 30
    param_list <treeNode> (68)
        on left: 43 44
        on right: 32 34
    param_list1 <treeNode> (69)
        on left: 45 46
        on right: 44 46
    para <treeNode> (70)
        on left: 47
        on right: 45 46
    expr <treeNode> (71)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
        on right: 36 37 38 39 40 47 51 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 71
    str_expr <treeNode> (72)
        on left: 68 69
        on right: 33 69
    var_expr <treeNode> (73)
        on left: 70 71
        on right: 37 52 71


State 0

    0 $accept: • Prog $end

    DECL  shift, and go to state 1

    Prog       go to state 2
    Gdecl_sec  go to state 3


State 1

    2 Gdecl_sec: DECL • Gdecl_list ENDDECL

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 6
    Gdecl       go to state 7
    ret_type    go to state 8


State 2

    0 $accept: Prog • $end

    $end  shift, and go to state 9


State 3

    1 Prog: Gdecl_sec • MainBlock

    error        shift, and go to state 10
    WRITE        shift, and go to state 11
    READ         shift, and go to state 12
    IF           shift, and go to state 13
    LOGICAL_NOT  shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK_Y      shift, and go to state 16
    CONTINUE     shift, and go to state 17
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    BEG          shift, and go to state 22
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    $end  reduce using rule 24 (stmt_list)
    ';'   reduce using rule 35 (assign_stmt)

    MainBlock     go to state 25
    stmt_list     go to state 26
    statement     go to state 27
    write_stmt    go to state 28
    read_stmt     go to state 29
    assign_stmt   go to state 30
    cond_stmt     go to state 31
    control_stmt  go to state 32
    expr          go to state 33
    var_expr      go to state 34


State 4

    6 ret_type: T_INT •

    $default  reduce using rule 6 (ret_type)


State 5

    7 ret_type: T_BOOL •

    $default  reduce using rule 7 (ret_type)


State 6

    2 Gdecl_sec: DECL Gdecl_list • ENDDECL

    ENDDECL  shift, and go to state 35


State 7

    4 Gdecl_list: Gdecl • Gdecl_list

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 36
    Gdecl       go to state 7
    ret_type    go to state 8


State 8

    5 Gdecl: ret_type • Glist ';'

    VAR  shift, and go to state 37

    Glist  go to state 38
    Gid    go to state 39
    func   go to state 40


State 9

    0 $accept: Prog $end •

    $default  accept


State 10

   26 stmt_list: error • ';'

    ';'  shift, and go to state 41


State 11

   32 write_stmt: WRITE • '(' param_list ')'
   33           | WRITE • '(' '"' str_expr '"' ')'

    '('  shift, and go to state 42


State 12

   34 read_stmt: READ • '(' param_list ')'

    '('  shift, and go to state 43


State 13

   38 cond_stmt: IF • expr THEN stmt_list ENDIF
   39          | IF • expr THEN stmt_list ELSE stmt_list ENDIF

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 44
    var_expr  go to state 45


State 14

   65 expr: LOGICAL_NOT • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 46
    var_expr  go to state 45


State 15

   40 cond_stmt: FOR • '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    '('  shift, and go to state 47


State 16

   41 control_stmt: BREAK_Y •

    $default  reduce using rule 41 (control_stmt)


State 17

   42 control_stmt: CONTINUE •

    $default  reduce using rule 42 (control_stmt)


State 18

   70 var_expr: VAR •

    $default  reduce using rule 70 (var_expr)


State 19

   48 expr: NUM •

    $default  reduce using rule 48 (expr)


State 20

   49 expr: T •

    $default  reduce using rule 49 (expr)


State 21

   50 expr: F •

    $default  reduce using rule 50 (expr)


State 22

   23 MainBlock: BEG • stmt_list END

    error        shift, and go to state 10
    WRITE        shift, and go to state 11
    READ         shift, and go to state 12
    IF           shift, and go to state 13
    LOGICAL_NOT  shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK_Y      shift, and go to state 16
    CONTINUE     shift, and go to state 17
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    END  reduce using rule 24 (stmt_list)
    ';'  reduce using rule 35 (assign_stmt)

    stmt_list     go to state 48
    statement     go to state 27
    write_stmt    go to state 28
    read_stmt     go to state 29
    assign_stmt   go to state 30
    cond_stmt     go to state 31
    control_stmt  go to state 32
    expr          go to state 33
    var_expr      go to state 34


State 23

   51 expr: '-' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 49
    var_expr  go to state 45


State 24

   53 expr: '(' • expr ')'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 50
    var_expr  go to state 45


State 25

    1 Prog: Gdecl_sec MainBlock •

    $default  reduce using rule 1 (Prog)


State 26

   22 MainBlock: stmt_list •

    $default  reduce using rule 22 (MainBlock)


State 27

   25 stmt_list: statement • stmt_list

    error        shift, and go to state 10
    WRITE        shift, and go to state 11
    READ         shift, and go to state 12
    IF           shift, and go to state 13
    LOGICAL_NOT  shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK_Y      shift, and go to state 16
    CONTINUE     shift, and go to state 17
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    $end   reduce using rule 24 (stmt_list)
    ELSE   reduce using rule 24 (stmt_list)
    ENDIF  reduce using rule 24 (stmt_list)
    END    reduce using rule 24 (stmt_list)
    ';'    reduce using rule 35 (assign_stmt)
    '}'    reduce using rule 24 (stmt_list)

    stmt_list     go to state 51
    statement     go to state 27
    write_stmt    go to state 28
    read_stmt     go to state 29
    assign_stmt   go to state 30
    cond_stmt     go to state 31
    control_stmt  go to state 32
    expr          go to state 33
    var_expr      go to state 34


State 28

   28 statement: write_stmt • ';'

    ';'  shift, and go to state 52


State 29

   31 statement: read_stmt • ';'

    ';'  shift, and go to state 53


State 30

   27 statement: assign_stmt • ';'

    ';'  shift, and go to state 54


State 31

   29 statement: cond_stmt •

    $default  reduce using rule 29 (statement)


State 32

   30 statement: control_stmt • ';'

    ';'  shift, and go to state 55


State 33

   36 assign_stmt: expr • '+' '+'
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68


State 34

   37 assign_stmt: var_expr • '=' expr
   52 expr: var_expr •
   71 var_expr: var_expr • '[' expr ']'

    '='  shift, and go to state 69
    '['  shift, and go to state 70

    $default  reduce using rule 52 (expr)


State 35

    2 Gdecl_sec: DECL Gdecl_list ENDDECL •

    $default  reduce using rule 2 (Gdecl_sec)


State 36

    4 Gdecl_list: Gdecl Gdecl_list •

    $default  reduce using rule 4 (Gdecl_list)


State 37

   11 Gid: VAR •
   13 func: VAR • '(' arg_list ')'

    '('  shift, and go to state 71

    $default  reduce using rule 11 (Gid)


State 38

    5 Gdecl: ret_type Glist • ';'

    ';'  shift, and go to state 72


State 39

    8 Glist: Gid •
    9      | Gid • ',' Glist
   12 Gid: Gid • '[' NUM ']'

    ','  shift, and go to state 73
    '['  shift, and go to state 74

    $default  reduce using rule 8 (Glist)


State 40

   10 Glist: func • ',' Glist

    ','  shift, and go to state 75


State 41

   26 stmt_list: error ';' •

    $default  reduce using rule 26 (stmt_list)


State 42

   32 write_stmt: WRITE '(' • param_list ')'
   33           | WRITE '(' • '"' str_expr '"' ')'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24
    '"'          shift, and go to state 76

    $default  reduce using rule 43 (param_list)

    param_list   go to state 77
    param_list1  go to state 78
    para         go to state 79
    expr         go to state 80
    var_expr     go to state 45


State 43

   34 read_stmt: READ '(' • param_list ')'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    $default  reduce using rule 43 (param_list)

    param_list   go to state 81
    param_list1  go to state 78
    para         go to state 79
    expr         go to state 80
    var_expr     go to state 45


State 44

   38 cond_stmt: IF expr • THEN stmt_list ENDIF
   39          | IF expr • THEN stmt_list ELSE stmt_list ENDIF
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    THEN                shift, and go to state 82
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68


State 45

   52 expr: var_expr •
   71 var_expr: var_expr • '[' expr ']'

    '['  shift, and go to state 70

    $default  reduce using rule 52 (expr)


State 46

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   65     | LOGICAL_NOT expr •
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    $default  reduce using rule 65 (expr)


State 47

   40 cond_stmt: FOR '(' • assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    $default  reduce using rule 35 (assign_stmt)

    assign_stmt  go to state 84
    expr         go to state 33
    var_expr     go to state 34


State 48

   23 MainBlock: BEG stmt_list • END

    END  shift, and go to state 85


State 49

   51 expr: '-' expr •
   54     | expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 51 (expr)


State 50

   53 expr: '(' expr • ')'
   54     | expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ')'                 shift, and go to state 86


State 51

   25 stmt_list: statement stmt_list •

    $default  reduce using rule 25 (stmt_list)


State 52

   28 statement: write_stmt ';' •

    $default  reduce using rule 28 (statement)


State 53

   31 statement: read_stmt ';' •

    $default  reduce using rule 31 (statement)


State 54

   27 statement: assign_stmt ';' •

    $default  reduce using rule 27 (statement)


State 55

   30 statement: control_stmt ';' •

    $default  reduce using rule 30 (statement)


State 56

   66 expr: expr LOGICAL_AND • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 87
    var_expr  go to state 45


State 57

   67 expr: expr LOGICAL_OR • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 88
    var_expr  go to state 45


State 58

   64 expr: expr EQUALEQUAL • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 89
    var_expr  go to state 45


State 59

   62 expr: expr LESSTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 90
    var_expr  go to state 45


State 60

   61 expr: expr GREATERTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 91
    var_expr  go to state 45


State 61

   63 expr: expr NOTEQUAL • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 92
    var_expr  go to state 45


State 62

   59 expr: expr '<' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 93
    var_expr  go to state 45


State 63

   60 expr: expr '>' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 94
    var_expr  go to state 45


State 64

   36 assign_stmt: expr '+' • '+'
   54 expr: expr '+' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '+'          shift, and go to state 95
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 96
    var_expr  go to state 45


State 65

   55 expr: expr '-' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 97
    var_expr  go to state 45


State 66

   56 expr: expr '*' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 98
    var_expr  go to state 45


State 67

   57 expr: expr '/' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 99
    var_expr  go to state 45


State 68

   58 expr: expr '%' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 100
    var_expr  go to state 45


State 69

   37 assign_stmt: var_expr '=' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 101
    var_expr  go to state 45


State 70

   71 var_expr: var_expr '[' • expr ']'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 102
    var_expr  go to state 45


State 71

   13 func: VAR '(' • arg_list ')'

    T_INT  shift, and go to state 103

    $default  reduce using rule 14 (arg_list)

    arg_list   go to state 104
    arg_list1  go to state 105
    arg        go to state 106
    arg_type   go to state 107


State 72

    5 Gdecl: ret_type Glist ';' •

    $default  reduce using rule 5 (Gdecl)


State 73

    9 Glist: Gid ',' • Glist

    VAR  shift, and go to state 37

    Glist  go to state 108
    Gid    go to state 39
    func   go to state 40


State 74

   12 Gid: Gid '[' • NUM ']'

    NUM  shift, and go to state 109


State 75

   10 Glist: func ',' • Glist

    VAR  shift, and go to state 37

    Glist  go to state 110
    Gid    go to state 39
    func   go to state 40


State 76

   33 write_stmt: WRITE '(' '"' • str_expr '"' ')'

    VAR  shift, and go to state 111

    str_expr  go to state 112


State 77

   32 write_stmt: WRITE '(' param_list • ')'

    ')'  shift, and go to state 113


State 78

   44 param_list: param_list1 •

    $default  reduce using rule 44 (param_list)


State 79

   45 param_list1: para •
   46            | para • ',' param_list1

    ','  shift, and go to state 114

    $default  reduce using rule 45 (param_list1)


State 80

   47 para: expr •
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 47 (para)


State 81

   34 read_stmt: READ '(' param_list • ')'

    ')'  shift, and go to state 115


State 82

   38 cond_stmt: IF expr THEN • stmt_list ENDIF
   39          | IF expr THEN • stmt_list ELSE stmt_list ENDIF

    error        shift, and go to state 10
    WRITE        shift, and go to state 11
    READ         shift, and go to state 12
    IF           shift, and go to state 13
    LOGICAL_NOT  shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK_Y      shift, and go to state 16
    CONTINUE     shift, and go to state 17
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    ELSE   reduce using rule 24 (stmt_list)
    ENDIF  reduce using rule 24 (stmt_list)
    ';'    reduce using rule 35 (assign_stmt)

    stmt_list     go to state 116
    statement     go to state 27
    write_stmt    go to state 28
    read_stmt     go to state 29
    assign_stmt   go to state 30
    cond_stmt     go to state 31
    control_stmt  go to state 32
    expr          go to state 33
    var_expr      go to state 34


State 83

   54 expr: expr '+' • expr

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 96
    var_expr  go to state 45


State 84

   40 cond_stmt: FOR '(' assign_stmt • ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    ';'  shift, and go to state 117


State 85

   23 MainBlock: BEG stmt_list END •

    $default  reduce using rule 23 (MainBlock)


State 86

   53 expr: '(' expr ')' •

    $default  reduce using rule 53 (expr)


State 87

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   66     | expr LOGICAL_AND expr •
   67     | expr • LOGICAL_OR expr

    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 66 (expr)


State 88

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr
   67     | expr LOGICAL_OR expr •

    LOGICAL_AND         shift, and go to state 56
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 67 (expr)


State 89

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   64     | expr EQUALEQUAL expr •
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 83
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 64 (expr)


State 90

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   62     | expr LESSTHANOREQUAL expr •
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 83
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 62 (expr)


State 91

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   61     | expr GREATERTHANOREQUAL expr •
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 83
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 61 (expr)


State 92

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   63     | expr NOTEQUAL expr •
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 83
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 63 (expr)


State 93

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   59     | expr '<' expr •
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 83
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 59 (expr)


State 94

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   60     | expr '>' expr •
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '+'  shift, and go to state 83
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 60 (expr)


State 95

   36 assign_stmt: expr '+' '+' •

    $default  reduce using rule 36 (assign_stmt)


State 96

   54 expr: expr • '+' expr
   54     | expr '+' expr •
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 54 (expr)


State 97

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   55     | expr '-' expr •
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 55 (expr)


State 98

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   56     | expr '*' expr •
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    $default  reduce using rule 56 (expr)


State 99

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   57     | expr '/' expr •
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    $default  reduce using rule 57 (expr)


State 100

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   58     | expr '%' expr •
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    $default  reduce using rule 58 (expr)


State 101

   37 assign_stmt: var_expr '=' expr •
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 37 (assign_stmt)


State 102

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr
   71 var_expr: var_expr '[' expr • ']'

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ']'                 shift, and go to state 118


State 103

   19 arg_type: T_INT •

    $default  reduce using rule 19 (arg_type)


State 104

   13 func: VAR '(' arg_list • ')'

    ')'  shift, and go to state 119


State 105

   15 arg_list: arg_list1 •
   16 arg_list1: arg_list1 • ';' arg

    ';'  shift, and go to state 120

    $default  reduce using rule 15 (arg_list)


State 106

   17 arg_list1: arg •

    $default  reduce using rule 17 (arg_list1)


State 107

   18 arg: arg_type • var_list

    VAR  shift, and go to state 121

    var_list  go to state 122


State 108

    9 Glist: Gid ',' Glist •

    $default  reduce using rule 9 (Glist)


State 109

   12 Gid: Gid '[' NUM • ']'

    ']'  shift, and go to state 123


State 110

   10 Glist: func ',' Glist •

    $default  reduce using rule 10 (Glist)


State 111

   68 str_expr: VAR •

    $default  reduce using rule 68 (str_expr)


State 112

   33 write_stmt: WRITE '(' '"' str_expr • '"' ')'
   69 str_expr: str_expr • VAR

    VAR  shift, and go to state 124
    '"'  shift, and go to state 125


State 113

   32 write_stmt: WRITE '(' param_list ')' •

    $default  reduce using rule 32 (write_stmt)


State 114

   46 param_list1: para ',' • param_list1

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    param_list1  go to state 126
    para         go to state 79
    expr         go to state 80
    var_expr     go to state 45


State 115

   34 read_stmt: READ '(' param_list ')' •

    $default  reduce using rule 34 (read_stmt)


State 116

   38 cond_stmt: IF expr THEN stmt_list • ENDIF
   39          | IF expr THEN stmt_list • ELSE stmt_list ENDIF

    ELSE   shift, and go to state 127
    ENDIF  shift, and go to state 128


State 117

   40 cond_stmt: FOR '(' assign_stmt ';' • expr ';' assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    expr      go to state 129
    var_expr  go to state 45


State 118

   71 var_expr: var_expr '[' expr ']' •

    $default  reduce using rule 71 (var_expr)


State 119

   13 func: VAR '(' arg_list ')' •

    $default  reduce using rule 13 (func)


State 120

   16 arg_list1: arg_list1 ';' • arg

    T_INT  shift, and go to state 103

    arg       go to state 130
    arg_type  go to state 107


State 121

   20 var_list: VAR •
   21         | VAR • ',' var_list

    ','  shift, and go to state 131

    $default  reduce using rule 20 (var_list)


State 122

   18 arg: arg_type var_list •

    $default  reduce using rule 18 (arg)


State 123

   12 Gid: Gid '[' NUM ']' •

    $default  reduce using rule 12 (Gid)


State 124

   69 str_expr: str_expr VAR •

    $default  reduce using rule 69 (str_expr)


State 125

   33 write_stmt: WRITE '(' '"' str_expr '"' • ')'

    ')'  shift, and go to state 132


State 126

   46 param_list1: para ',' param_list1 •

    $default  reduce using rule 46 (param_list1)


State 127

   39 cond_stmt: IF expr THEN stmt_list ELSE • stmt_list ENDIF

    error        shift, and go to state 10
    WRITE        shift, and go to state 11
    READ         shift, and go to state 12
    IF           shift, and go to state 13
    LOGICAL_NOT  shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK_Y      shift, and go to state 16
    CONTINUE     shift, and go to state 17
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    ENDIF  reduce using rule 24 (stmt_list)
    ';'    reduce using rule 35 (assign_stmt)

    stmt_list     go to state 133
    statement     go to state 27
    write_stmt    go to state 28
    read_stmt     go to state 29
    assign_stmt   go to state 30
    cond_stmt     go to state 31
    control_stmt  go to state 32
    expr          go to state 33
    var_expr      go to state 34


State 128

   38 cond_stmt: IF expr THEN stmt_list ENDIF •

    $default  reduce using rule 38 (cond_stmt)


State 129

   40 cond_stmt: FOR '(' assign_stmt ';' expr • ';' assign_stmt ')' '{' stmt_list '}'
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • '/' expr
   58     | expr • '%' expr
   59     | expr • '<' expr
   60     | expr • '>' expr
   61     | expr • GREATERTHANOREQUAL expr
   62     | expr • LESSTHANOREQUAL expr
   63     | expr • NOTEQUAL expr
   64     | expr • EQUALEQUAL expr
   66     | expr • LOGICAL_AND expr
   67     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 83
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ';'                 shift, and go to state 134


State 130

   16 arg_list1: arg_list1 ';' arg •

    $default  reduce using rule 16 (arg_list1)


State 131

   21 var_list: VAR ',' • var_list

    VAR  shift, and go to state 121

    var_list  go to state 135


State 132

   33 write_stmt: WRITE '(' '"' str_expr '"' ')' •

    $default  reduce using rule 33 (write_stmt)


State 133

   39 cond_stmt: IF expr THEN stmt_list ELSE stmt_list • ENDIF

    ENDIF  shift, and go to state 136


State 134

   40 cond_stmt: FOR '(' assign_stmt ';' expr ';' • assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 14
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    $default  reduce using rule 35 (assign_stmt)

    assign_stmt  go to state 137
    expr         go to state 33
    var_expr     go to state 34


State 135

   21 var_list: VAR ',' var_list •

    $default  reduce using rule 21 (var_list)


State 136

   39 cond_stmt: IF expr THEN stmt_list ELSE stmt_list ENDIF •

    $default  reduce using rule 39 (cond_stmt)


State 137

   40 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt • ')' '{' stmt_list '}'

    ')'  shift, and go to state 138


State 138

   40 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' • '{' stmt_list '}'

    '{'  shift, and go to state 139


State 139

   40 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' • stmt_list '}'

    error        shift, and go to state 10
    WRITE        shift, and go to state 11
    READ         shift, and go to state 12
    IF           shift, and go to state 13
    LOGICAL_NOT  shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK_Y      shift, and go to state 16
    CONTINUE     shift, and go to state 17
    VAR          shift, and go to state 18
    NUM          shift, and go to state 19
    T            shift, and go to state 20
    F            shift, and go to state 21
    '-'          shift, and go to state 23
    '('          shift, and go to state 24

    ';'  reduce using rule 35 (assign_stmt)
    '}'  reduce using rule 24 (stmt_list)

    stmt_list     go to state 140
    statement     go to state 27
    write_stmt    go to state 28
    read_stmt     go to state 29
    assign_stmt   go to state 30
    cond_stmt     go to state 31
    control_stmt  go to state 32
    expr          go to state 33
    var_expr      go to state 34


State 140

   40 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list • '}'

    '}'  shift, and go to state 141


State 141

   40 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}' •

    $default  reduce using rule 40 (cond_stmt)
