Terminals unused in grammar

    LOWER_THAN_IF


Grammar

    0 $accept: Prog $end

    1 Prog: Gdecl_sec stmt_list

    2 Gdecl_sec: DECL Gdecl_list ENDDECL

    3 Gdecl_list: ε
    4           | Gdecl Gdecl_list

    5 Gdecl: ret_type Glist ';'

    6 ret_type: T_INT
    7         | T_BOOL

    8 Glist: Gid
    9      | Gid ',' Glist
   10      | func ',' Glist

   11 Gid: VAR
   12    | Gid '[' NUM ']'

   13 func: VAR '(' arg_list ')'

   14 arg_list: ε
   15         | arg_list1

   16 arg_list1: arg_list1 ';' arg
   17          | arg

   18 arg: arg_type var_list

   19 arg_type: T_INT

   20 var_list: VAR
   21         | VAR ',' var_list

   22 stmt_list: ε
   23          | statement stmt_list
   24          | error ';'

   25 statement: assign_stmt ';'
   26          | write_stmt ';'
   27          | cond_stmt
   28          | control_stmt ';'

   29 write_stmt: WRITE '(' expr ')'
   30           | WRITE '(' '"' str_expr '"' ')'

   31 assign_stmt: ε
   32            | var_expr '=' expr

   33 cond_stmt: IF expr '{' stmt_list '}'
   34          | IF expr '{' stmt_list '}' ELSE '{' stmt_list '}'
   35          | FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

   36 control_stmt: BREAK_Y

   37 expr: NUM
   38     | T
   39     | F
   40     | '-' expr
   41     | var_expr
   42     | '(' expr ')'
   43     | expr '+' expr
   44     | expr '-' expr
   45     | expr '*' expr
   46     | expr '/' expr
   47     | expr '%' expr
   48     | expr '<' expr
   49     | expr '>' expr
   50     | expr GREATERTHANOREQUAL expr
   51     | expr LESSTHANOREQUAL expr
   52     | expr NOTEQUAL expr
   53     | expr EQUALEQUAL expr
   54     | LOGICAL_NOT expr
   55     | expr LOGICAL_AND expr
   56     | expr LOGICAL_OR expr

   57 str_expr: VAR
   58         | str_expr VAR

   59 var_expr: VAR
   60         | var_expr '[' expr ']'


Terminals, with rules where they appear

    $end (0) 0
    '"' (34) 30
    '%' (37) 47
    '(' (40) 13 29 30 35 42
    ')' (41) 13 29 30 35 42
    '*' (42) 45
    '+' (43) 43
    ',' (44) 9 10 21
    '-' (45) 40 44
    '/' (47) 46
    ';' (59) 5 16 24 25 26 28 35
    '<' (60) 48
    '=' (61) 32
    '>' (62) 49
    '[' (91) 12 60
    ']' (93) 12 60
    '{' (123) 33 34 35
    '}' (125) 33 34 35
    error (256) 24
    WRITE <treeNode> (258) 29 30
    DECL <treeNode> (259) 2
    ENDDECL <treeNode> (260) 2
    T_INT <treeNode> (261) 6 19
    T_BOOL <treeNode> (262) 7
    IF <treeNode> (263) 33 34
    ELSE <treeNode> (264) 34
    LOGICAL_AND <treeNode> (265) 55
    LOGICAL_NOT <treeNode> (266) 54
    LOGICAL_OR <treeNode> (267) 56
    EQUALEQUAL <treeNode> (268) 53
    LESSTHANOREQUAL <treeNode> (269) 51
    GREATERTHANOREQUAL <treeNode> (270) 50
    NOTEQUAL <treeNode> (271) 52
    FOR <treeNode> (272) 35
    BREAK_Y <treeNode> (273) 36
    VAR <entry> (274) 11 13 20 21 57 58 59
    NUM <var> (275) 12 37
    T <b_var> (276) 38
    F <b_var> (277) 39
    LOWER_THAN_IF (278)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    Prog (42)
        on left: 1
        on right: 0
    Gdecl_sec (43)
        on left: 2
        on right: 1
    Gdecl_list <treeNode> (44)
        on left: 3 4
        on right: 2 4
    Gdecl <treeNode> (45)
        on left: 5
        on right: 4
    ret_type <treeNode> (46)
        on left: 6 7
        on right: 5
    Glist <treeNode> (47)
        on left: 8 9 10
        on right: 5 9 10
    Gid <treeNode> (48)
        on left: 11 12
        on right: 8 9 12
    func (49)
        on left: 13
        on right: 10
    arg_list (50)
        on left: 14 15
        on right: 13
    arg_list1 (51)
        on left: 16 17
        on right: 15 16
    arg (52)
        on left: 18
        on right: 16 17
    arg_type (53)
        on left: 19
        on right: 18
    var_list (54)
        on left: 20 21
        on right: 18 21
    stmt_list <treeNode> (55)
        on left: 22 23 24
        on right: 1 23 33 34 35
    statement <treeNode> (56)
        on left: 25 26 27 28
        on right: 23
    write_stmt <treeNode> (57)
        on left: 29 30
        on right: 26
    assign_stmt <treeNode> (58)
        on left: 31 32
        on right: 25 35
    cond_stmt <treeNode> (59)
        on left: 33 34 35
        on right: 27
    control_stmt <treeNode> (60)
        on left: 36
        on right: 28
    expr <treeNode> (61)
        on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
        on right: 29 32 33 34 35 40 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 60
    str_expr <treeNode> (62)
        on left: 57 58
        on right: 30 58
    var_expr <treeNode> (63)
        on left: 59 60
        on right: 32 41 60


State 0

    0 $accept: • Prog $end

    DECL  shift, and go to state 1

    Prog       go to state 2
    Gdecl_sec  go to state 3


State 1

    2 Gdecl_sec: DECL • Gdecl_list ENDDECL

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 6
    Gdecl       go to state 7
    ret_type    go to state 8


State 2

    0 $accept: Prog • $end

    $end  shift, and go to state 9


State 3

    1 Prog: Gdecl_sec • stmt_list

    error    shift, and go to state 10
    WRITE    shift, and go to state 11
    IF       shift, and go to state 12
    FOR      shift, and go to state 13
    BREAK_Y  shift, and go to state 14
    VAR      shift, and go to state 15

    $end  reduce using rule 22 (stmt_list)
    ';'   reduce using rule 31 (assign_stmt)

    stmt_list     go to state 16
    statement     go to state 17
    write_stmt    go to state 18
    assign_stmt   go to state 19
    cond_stmt     go to state 20
    control_stmt  go to state 21
    var_expr      go to state 22


State 4

    6 ret_type: T_INT •

    $default  reduce using rule 6 (ret_type)


State 5

    7 ret_type: T_BOOL •

    $default  reduce using rule 7 (ret_type)


State 6

    2 Gdecl_sec: DECL Gdecl_list • ENDDECL

    ENDDECL  shift, and go to state 23


State 7

    4 Gdecl_list: Gdecl • Gdecl_list

    T_INT   shift, and go to state 4
    T_BOOL  shift, and go to state 5

    $default  reduce using rule 3 (Gdecl_list)

    Gdecl_list  go to state 24
    Gdecl       go to state 7
    ret_type    go to state 8


State 8

    5 Gdecl: ret_type • Glist ';'

    VAR  shift, and go to state 25

    Glist  go to state 26
    Gid    go to state 27
    func   go to state 28


State 9

    0 $accept: Prog $end •

    $default  accept


State 10

   24 stmt_list: error • ';'

    ';'  shift, and go to state 29


State 11

   29 write_stmt: WRITE • '(' expr ')'
   30           | WRITE • '(' '"' str_expr '"' ')'

    '('  shift, and go to state 30


State 12

   33 cond_stmt: IF • expr '{' stmt_list '}'
   34          | IF • expr '{' stmt_list '}' ELSE '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 37
    var_expr  go to state 38


State 13

   35 cond_stmt: FOR • '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    '('  shift, and go to state 39


State 14

   36 control_stmt: BREAK_Y •

    $default  reduce using rule 36 (control_stmt)


State 15

   59 var_expr: VAR •

    $default  reduce using rule 59 (var_expr)


State 16

    1 Prog: Gdecl_sec stmt_list •

    $default  reduce using rule 1 (Prog)


State 17

   23 stmt_list: statement • stmt_list

    error    shift, and go to state 10
    WRITE    shift, and go to state 11
    IF       shift, and go to state 12
    FOR      shift, and go to state 13
    BREAK_Y  shift, and go to state 14
    VAR      shift, and go to state 15

    $end  reduce using rule 22 (stmt_list)
    ';'   reduce using rule 31 (assign_stmt)
    '}'   reduce using rule 22 (stmt_list)

    stmt_list     go to state 40
    statement     go to state 17
    write_stmt    go to state 18
    assign_stmt   go to state 19
    cond_stmt     go to state 20
    control_stmt  go to state 21
    var_expr      go to state 22


State 18

   26 statement: write_stmt • ';'

    ';'  shift, and go to state 41


State 19

   25 statement: assign_stmt • ';'

    ';'  shift, and go to state 42


State 20

   27 statement: cond_stmt •

    $default  reduce using rule 27 (statement)


State 21

   28 statement: control_stmt • ';'

    ';'  shift, and go to state 43


State 22

   32 assign_stmt: var_expr • '=' expr
   60 var_expr: var_expr • '[' expr ']'

    '='  shift, and go to state 44
    '['  shift, and go to state 45


State 23

    2 Gdecl_sec: DECL Gdecl_list ENDDECL •

    $default  reduce using rule 2 (Gdecl_sec)


State 24

    4 Gdecl_list: Gdecl Gdecl_list •

    $default  reduce using rule 4 (Gdecl_list)


State 25

   11 Gid: VAR •
   13 func: VAR • '(' arg_list ')'

    '('  shift, and go to state 46

    $default  reduce using rule 11 (Gid)


State 26

    5 Gdecl: ret_type Glist • ';'

    ';'  shift, and go to state 47


State 27

    8 Glist: Gid •
    9      | Gid • ',' Glist
   12 Gid: Gid • '[' NUM ']'

    ','  shift, and go to state 48
    '['  shift, and go to state 49

    $default  reduce using rule 8 (Glist)


State 28

   10 Glist: func • ',' Glist

    ','  shift, and go to state 50


State 29

   24 stmt_list: error ';' •

    $default  reduce using rule 24 (stmt_list)


State 30

   29 write_stmt: WRITE '(' • expr ')'
   30           | WRITE '(' • '"' str_expr '"' ')'

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36
    '"'          shift, and go to state 51

    expr      go to state 52
    var_expr  go to state 38


State 31

   54 expr: LOGICAL_NOT • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 53
    var_expr  go to state 38


State 32

   37 expr: NUM •

    $default  reduce using rule 37 (expr)


State 33

   38 expr: T •

    $default  reduce using rule 38 (expr)


State 34

   39 expr: F •

    $default  reduce using rule 39 (expr)


State 35

   40 expr: '-' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 54
    var_expr  go to state 38


State 36

   42 expr: '(' • expr ')'

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 55
    var_expr  go to state 38


State 37

   33 cond_stmt: IF expr • '{' stmt_list '}'
   34          | IF expr • '{' stmt_list '}' ELSE '{' stmt_list '}'
   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    '{'                 shift, and go to state 69


State 38

   41 expr: var_expr •
   60 var_expr: var_expr • '[' expr ']'

    '['  shift, and go to state 45

    $default  reduce using rule 41 (expr)


State 39

   35 cond_stmt: FOR '(' • assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 15

    $default  reduce using rule 31 (assign_stmt)

    assign_stmt  go to state 70
    var_expr     go to state 22


State 40

   23 stmt_list: statement stmt_list •

    $default  reduce using rule 23 (stmt_list)


State 41

   26 statement: write_stmt ';' •

    $default  reduce using rule 26 (statement)


State 42

   25 statement: assign_stmt ';' •

    $default  reduce using rule 25 (statement)


State 43

   28 statement: control_stmt ';' •

    $default  reduce using rule 28 (statement)


State 44

   32 assign_stmt: var_expr '=' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 71
    var_expr  go to state 38


State 45

   60 var_expr: var_expr '[' • expr ']'

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 72
    var_expr  go to state 38


State 46

   13 func: VAR '(' • arg_list ')'

    T_INT  shift, and go to state 73

    $default  reduce using rule 14 (arg_list)

    arg_list   go to state 74
    arg_list1  go to state 75
    arg        go to state 76
    arg_type   go to state 77


State 47

    5 Gdecl: ret_type Glist ';' •

    $default  reduce using rule 5 (Gdecl)


State 48

    9 Glist: Gid ',' • Glist

    VAR  shift, and go to state 25

    Glist  go to state 78
    Gid    go to state 27
    func   go to state 28


State 49

   12 Gid: Gid '[' • NUM ']'

    NUM  shift, and go to state 79


State 50

   10 Glist: func ',' • Glist

    VAR  shift, and go to state 25

    Glist  go to state 80
    Gid    go to state 27
    func   go to state 28


State 51

   30 write_stmt: WRITE '(' '"' • str_expr '"' ')'

    VAR  shift, and go to state 81

    str_expr  go to state 82


State 52

   29 write_stmt: WRITE '(' expr • ')'
   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ')'                 shift, and go to state 83


State 53

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   54     | LOGICAL_NOT expr •
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    $default  reduce using rule 54 (expr)


State 54

   40 expr: '-' expr •
   43     | expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 40 (expr)


State 55

   42 expr: '(' expr • ')'
   43     | expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ')'                 shift, and go to state 84


State 56

   55 expr: expr LOGICAL_AND • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 85
    var_expr  go to state 38


State 57

   56 expr: expr LOGICAL_OR • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 86
    var_expr  go to state 38


State 58

   53 expr: expr EQUALEQUAL • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 87
    var_expr  go to state 38


State 59

   51 expr: expr LESSTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 88
    var_expr  go to state 38


State 60

   50 expr: expr GREATERTHANOREQUAL • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 89
    var_expr  go to state 38


State 61

   52 expr: expr NOTEQUAL • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 90
    var_expr  go to state 38


State 62

   48 expr: expr '<' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 91
    var_expr  go to state 38


State 63

   49 expr: expr '>' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 92
    var_expr  go to state 38


State 64

   43 expr: expr '+' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 93
    var_expr  go to state 38


State 65

   44 expr: expr '-' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 94
    var_expr  go to state 38


State 66

   45 expr: expr '*' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 95
    var_expr  go to state 38


State 67

   46 expr: expr '/' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 96
    var_expr  go to state 38


State 68

   47 expr: expr '%' • expr

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 97
    var_expr  go to state 38


State 69

   33 cond_stmt: IF expr '{' • stmt_list '}'
   34          | IF expr '{' • stmt_list '}' ELSE '{' stmt_list '}'

    error    shift, and go to state 10
    WRITE    shift, and go to state 11
    IF       shift, and go to state 12
    FOR      shift, and go to state 13
    BREAK_Y  shift, and go to state 14
    VAR      shift, and go to state 15

    ';'  reduce using rule 31 (assign_stmt)
    '}'  reduce using rule 22 (stmt_list)

    stmt_list     go to state 98
    statement     go to state 17
    write_stmt    go to state 18
    assign_stmt   go to state 19
    cond_stmt     go to state 20
    control_stmt  go to state 21
    var_expr      go to state 22


State 70

   35 cond_stmt: FOR '(' assign_stmt • ';' expr ';' assign_stmt ')' '{' stmt_list '}'

    ';'  shift, and go to state 99


State 71

   32 assign_stmt: var_expr '=' expr •
   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 32 (assign_stmt)


State 72

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr
   60 var_expr: var_expr '[' expr • ']'

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ']'                 shift, and go to state 100


State 73

   19 arg_type: T_INT •

    $default  reduce using rule 19 (arg_type)


State 74

   13 func: VAR '(' arg_list • ')'

    ')'  shift, and go to state 101


State 75

   15 arg_list: arg_list1 •
   16 arg_list1: arg_list1 • ';' arg

    ';'  shift, and go to state 102

    $default  reduce using rule 15 (arg_list)


State 76

   17 arg_list1: arg •

    $default  reduce using rule 17 (arg_list1)


State 77

   18 arg: arg_type • var_list

    VAR  shift, and go to state 103

    var_list  go to state 104


State 78

    9 Glist: Gid ',' Glist •

    $default  reduce using rule 9 (Glist)


State 79

   12 Gid: Gid '[' NUM • ']'

    ']'  shift, and go to state 105


State 80

   10 Glist: func ',' Glist •

    $default  reduce using rule 10 (Glist)


State 81

   57 str_expr: VAR •

    $default  reduce using rule 57 (str_expr)


State 82

   30 write_stmt: WRITE '(' '"' str_expr • '"' ')'
   58 str_expr: str_expr • VAR

    VAR  shift, and go to state 106
    '"'  shift, and go to state 107


State 83

   29 write_stmt: WRITE '(' expr ')' •

    $default  reduce using rule 29 (write_stmt)


State 84

   42 expr: '(' expr ')' •

    $default  reduce using rule 42 (expr)


State 85

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   55     | expr LOGICAL_AND expr •
   56     | expr • LOGICAL_OR expr

    $default  reduce using rule 55 (expr)


State 86

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr
   56     | expr LOGICAL_OR expr •

    $default  reduce using rule 56 (expr)


State 87

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   53     | expr EQUALEQUAL expr •
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '+'          shift, and go to state 64
    '-'          shift, and go to state 65
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 53 (expr)


State 88

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   51     | expr LESSTHANOREQUAL expr •
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '+'          shift, and go to state 64
    '-'          shift, and go to state 65
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 51 (expr)


State 89

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   50     | expr GREATERTHANOREQUAL expr •
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '+'          shift, and go to state 64
    '-'          shift, and go to state 65
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 50 (expr)


State 90

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   52     | expr NOTEQUAL expr •
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '+'          shift, and go to state 64
    '-'          shift, and go to state 65
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 52 (expr)


State 91

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   48     | expr '<' expr •
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 48 (expr)


State 92

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   49     | expr '>' expr •
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68

    $default  reduce using rule 49 (expr)


State 93

   43 expr: expr • '+' expr
   43     | expr '+' expr •
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 43 (expr)


State 94

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   44     | expr '-' expr •
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '*'          shift, and go to state 66
    '/'          shift, and go to state 67
    '%'          shift, and go to state 68

    $default  reduce using rule 44 (expr)


State 95

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   45     | expr '*' expr •
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '%'          shift, and go to state 68

    $default  reduce using rule 45 (expr)


State 96

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   46     | expr '/' expr •
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57
    '%'          shift, and go to state 68

    $default  reduce using rule 46 (expr)


State 97

   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   47     | expr '%' expr •
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND  shift, and go to state 56
    LOGICAL_OR   shift, and go to state 57

    $default  reduce using rule 47 (expr)


State 98

   33 cond_stmt: IF expr '{' stmt_list • '}'
   34          | IF expr '{' stmt_list • '}' ELSE '{' stmt_list '}'

    '}'  shift, and go to state 108


State 99

   35 cond_stmt: FOR '(' assign_stmt ';' • expr ';' assign_stmt ')' '{' stmt_list '}'

    LOGICAL_NOT  shift, and go to state 31
    VAR          shift, and go to state 15
    NUM          shift, and go to state 32
    T            shift, and go to state 33
    F            shift, and go to state 34
    '-'          shift, and go to state 35
    '('          shift, and go to state 36

    expr      go to state 109
    var_expr  go to state 38


State 100

   60 var_expr: var_expr '[' expr ']' •

    $default  reduce using rule 60 (var_expr)


State 101

   13 func: VAR '(' arg_list ')' •

    $default  reduce using rule 13 (func)


State 102

   16 arg_list1: arg_list1 ';' • arg

    T_INT  shift, and go to state 73

    arg       go to state 110
    arg_type  go to state 77


State 103

   20 var_list: VAR •
   21         | VAR • ',' var_list

    ','  shift, and go to state 111

    $default  reduce using rule 20 (var_list)


State 104

   18 arg: arg_type var_list •

    $default  reduce using rule 18 (arg)


State 105

   12 Gid: Gid '[' NUM ']' •

    $default  reduce using rule 12 (Gid)


State 106

   58 str_expr: str_expr VAR •

    $default  reduce using rule 58 (str_expr)


State 107

   30 write_stmt: WRITE '(' '"' str_expr '"' • ')'

    ')'  shift, and go to state 112


State 108

   33 cond_stmt: IF expr '{' stmt_list '}' •
   34          | IF expr '{' stmt_list '}' • ELSE '{' stmt_list '}'

    ELSE  shift, and go to state 113

    $default  reduce using rule 33 (cond_stmt)


State 109

   35 cond_stmt: FOR '(' assign_stmt ';' expr • ';' assign_stmt ')' '{' stmt_list '}'
   43 expr: expr • '+' expr
   44     | expr • '-' expr
   45     | expr • '*' expr
   46     | expr • '/' expr
   47     | expr • '%' expr
   48     | expr • '<' expr
   49     | expr • '>' expr
   50     | expr • GREATERTHANOREQUAL expr
   51     | expr • LESSTHANOREQUAL expr
   52     | expr • NOTEQUAL expr
   53     | expr • EQUALEQUAL expr
   55     | expr • LOGICAL_AND expr
   56     | expr • LOGICAL_OR expr

    LOGICAL_AND         shift, and go to state 56
    LOGICAL_OR          shift, and go to state 57
    EQUALEQUAL          shift, and go to state 58
    LESSTHANOREQUAL     shift, and go to state 59
    GREATERTHANOREQUAL  shift, and go to state 60
    NOTEQUAL            shift, and go to state 61
    '<'                 shift, and go to state 62
    '>'                 shift, and go to state 63
    '+'                 shift, and go to state 64
    '-'                 shift, and go to state 65
    '*'                 shift, and go to state 66
    '/'                 shift, and go to state 67
    '%'                 shift, and go to state 68
    ';'                 shift, and go to state 114


State 110

   16 arg_list1: arg_list1 ';' arg •

    $default  reduce using rule 16 (arg_list1)


State 111

   21 var_list: VAR ',' • var_list

    VAR  shift, and go to state 103

    var_list  go to state 115


State 112

   30 write_stmt: WRITE '(' '"' str_expr '"' ')' •

    $default  reduce using rule 30 (write_stmt)


State 113

   34 cond_stmt: IF expr '{' stmt_list '}' ELSE • '{' stmt_list '}'

    '{'  shift, and go to state 116


State 114

   35 cond_stmt: FOR '(' assign_stmt ';' expr ';' • assign_stmt ')' '{' stmt_list '}'

    VAR  shift, and go to state 15

    $default  reduce using rule 31 (assign_stmt)

    assign_stmt  go to state 117
    var_expr     go to state 22


State 115

   21 var_list: VAR ',' var_list •

    $default  reduce using rule 21 (var_list)


State 116

   34 cond_stmt: IF expr '{' stmt_list '}' ELSE '{' • stmt_list '}'

    error    shift, and go to state 10
    WRITE    shift, and go to state 11
    IF       shift, and go to state 12
    FOR      shift, and go to state 13
    BREAK_Y  shift, and go to state 14
    VAR      shift, and go to state 15

    ';'  reduce using rule 31 (assign_stmt)
    '}'  reduce using rule 22 (stmt_list)

    stmt_list     go to state 118
    statement     go to state 17
    write_stmt    go to state 18
    assign_stmt   go to state 19
    cond_stmt     go to state 20
    control_stmt  go to state 21
    var_expr      go to state 22


State 117

   35 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt • ')' '{' stmt_list '}'

    ')'  shift, and go to state 119


State 118

   34 cond_stmt: IF expr '{' stmt_list '}' ELSE '{' stmt_list • '}'

    '}'  shift, and go to state 120


State 119

   35 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' • '{' stmt_list '}'

    '{'  shift, and go to state 121


State 120

   34 cond_stmt: IF expr '{' stmt_list '}' ELSE '{' stmt_list '}' •

    $default  reduce using rule 34 (cond_stmt)


State 121

   35 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' • stmt_list '}'

    error    shift, and go to state 10
    WRITE    shift, and go to state 11
    IF       shift, and go to state 12
    FOR      shift, and go to state 13
    BREAK_Y  shift, and go to state 14
    VAR      shift, and go to state 15

    ';'  reduce using rule 31 (assign_stmt)
    '}'  reduce using rule 22 (stmt_list)

    stmt_list     go to state 122
    statement     go to state 17
    write_stmt    go to state 18
    assign_stmt   go to state 19
    cond_stmt     go to state 20
    control_stmt  go to state 21
    var_expr      go to state 22


State 122

   35 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list • '}'

    '}'  shift, and go to state 123


State 123

   35 cond_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' '{' stmt_list '}' •

    $default  reduce using rule 35 (cond_stmt)
